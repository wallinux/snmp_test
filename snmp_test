#!/bin/bash

[ -z "$IPv4" ] && IPv4=yes
[ -z "$IPv6" ] && IPv6=yes
[ -z "$DTLSUDP" ] && DTLSUDP=no
[ -z "$REMOTE" ] && REMOTE=no
[ -z "$TCPDUMP" ] && TCPDUMP=no
[ -z "$TRACE" ] && TRACE=yes
[ -z "$SHOWLOGS" ] && SHOWLOGS=yes
[ -z "$DEBUG" ] && DEBUG=no

[ -z "$IPv4_HOST" ] && IPv4_HOST=0.0.0.0
[ -z "$IPv6_HOST" ] && IPv6_HOST=udp6:[::1]
[ -z "$IPDEV0" ] && IPDEV0=eth0
[ -z "$IPREMOTEDEV0" ] && IPREMOTEDEV0=eth0
[ -z "$SNMPD_CONF" ] && SNMPD_CONF=snmpd.conf
[ -z "$SNMPTRAPD_CONF" ] && SNMPTRAPD_CONF=snmptrapd.conf
[ -z "$REMOTE_IPv4" ] && REMOTE_IPv4=128.224.95.182
#SNMP_PROTOCOLS="1 2c 3"
[ -z "$SNMP_PROTOCOLS" ] && SNMP_PROTOCOLS="2c"
[ -z "$SNMP_COMMUNITY" ] && SNMP_COMMUNITY=public

#####################################################################
SNMPD_LOG=/tmp/snmpd.log
SNMPD_PID=/tmp/snmpd.pid
SNMPD_PORT=161

SNMPTRAPD_LOG=/tmp/snmptrapd.log
SNMPTRAPD_PID=/tmp/snmptrapd.pid
SNMPTRAPD_PORT=162

USER=awallin
PW=kalle123

IPv4_LO=172.16.1.100
IPv4_DEV0=128.224.95.181
IPv6_LO=2001:1b70:82a8:90:e085::10
IPv6_DEV0=2001:1b70:82a8:90:1284:31:0:2
IPv6_REMOTE_DEV0=2001:1b70:82a8:90:1284:31:0:4

HEAD="head -3"
NOTE='echo -e \n--- '

#####################################################################
function snmp_kill () {
    # Kill all running snmp servers
    killall snmpd
    killall snmptrapd
    sleep 1
}

function prepare_remote () {
    if [ ! -e /tmp/prepare_remote ]; then
	$NOTE "Preparing ip remote"
	ssh $REMOTE_IPv4 ifconfig $IPREMOTEDEV0 inet6 add $IPv6_REMOTE_DEV0/128
	ssh $REMOTE_IPv4 ip -6 route add default dev $IPREMOTEDEV0
	ssh $REMOTE_IPv4 ip -6 route add via $IPv6_DEV0 $IPv6_LO
	ssh $REMOTE_IPv4 ip -4 route add via $IPv4_DEV0 $IPv4_LO
	touch /tmp/prepare_remote
    else
	$NOTE "remote ip already prepared"
    fi
}

function prepare_ip () {
    if [ ! -e /tmp/prepare_ip ]; then
	$NOTE "Preparing ip addresses"
	ifconfig lo inet add $IPv4_LO
	ifconfig lo inet6 add $IPv6_LO/128
	ifconfig $IPDEV0 inet6 add $IPv6_DEV0/80
	touch /tmp/prepare_ip
    else
	$NOTE "ip addresses already prepared"
    fi
}

function prepare_user () {
    if [ ! -e /tmp/prepare_user ]; then
	$NOTE "Preparing user $USER"
	net-snmp-create-v3-user -A $PW -X $PW -a MD5 -x DES $USER
	touch /tmp/prepare_user
    else
	$NOTE "User already prepared"
    fi
}

function show_logs () {
    if [ "$SHOWLOGS" == yes ]; then
	$NOTE "$SNMPD_LOG"
	cat $SNMPD_LOG
	$NOTE "$SNMPTRAPD_LOG"
	cat $SNMPTRAPD_LOG
    fi
}


function snmp_check_servers () {
    # check if the servers where started
    if [ "$TRACE" == yes ]; then
	$NOTE "ps snmp"
	ps -ef | grep snmp
	$NOTE "Check open ports"
	netstat -tulpn | grep snmp
    fi
    show_logs
}

function snmp_start () {
    if [ "$DEBUG" == yes ]; then
	snmptrapd_debug=-Dtrap,transport,usm
	snmpd_debug=-Dtrap,transport,usm,trapsess,netsnmp_udp6,netsnmp_sockaddr_in6,snmpd_ports,socket:option,udpbase:sendto,netsnmp_udp,netsnmp_ipv6
	#snmpd_debug=-D

	SHOWLOGS=yes
    fi

    # Start snmp servers
    snmpd_servers=()
    if [ "$IPv4" == "yes" ]; then
	snmpd_servers+=("udp:0.0.0.0:$SNMPD_PORT")
    fi
    if [ "$IPv6" == "yes" ]; then
	#snmpd_servers+=("udp6:[$IPv6_LO]:$SNMPD_PORT")
	snmpd_servers+=("udp6:[::]:$SNMPD_PORT")
    fi
    if [ "$DTLSUDP" == "yes" ]; then
	snmpd_servers+=('dtlsudp:0.0.0.0:9161')
	snmpd_servers+=('dtlsudp:[::]:9161')
    fi
    snmptrapd $snmptrapd_debug -c $SNMPTRAPD_CONF -Lf $SNMPTRAPD_LOG -p $SNMPTRAPD_PID udp:$SNMPTRAPD_PORT,udp6:$SNMPTRAPD_PORT
    snmpd $snmpd_debug $mibs -c $SNMPD_CONF -Lf $SNMPD_LOG -p $SNMPD_PID ${snmpd_servers[@]}
}

function snmp_walk () {
    host=$1
    protocol_version=$2
    community=$3
    user=$4
    pw=$5

    $NOTE "WALK $host v$protocol_version"
    if [ $protocol_version == "3" ]; then
	snmpwalk -v 3 -a MD5 -A $pw -l authNoPriv -u $user $host . | $HEAD
    else
	snmpwalk -v $protocol_version -c $community $host | $HEAD
    fi
}

function snmp_walk_ip ()
{
    host=$1

    for p in $SNMP_PROTOCOLS; do
	snmp_walk $host $p $SNMP_COMMUNITY $USER $PW
    done
}

function snmp_get () {
    host=$1
    protocol_version=$2
    community=$3
    user=$4
    pw=$5

    $NOTE "GET $host v$protocol_version"
    if [ $protocol_version == "3" ]; then
	snmpget -v 3 -a MD5 -A $pw -l authNoPriv -u $user $host system.sysDescr.0
    else
	snmpget -v $protocol_version -c $community $host system.sysDescr.0
    fi
}

function snmp_get_ip ()
{
    host=$1

    for p in $SNMP_PROTOCOLS; do
	snmp_get $host $p $SNMP_COMMUNITY $USER $PW
    done;
}

TCPDUMP_REMOTE_CAP=/tmp/tcpdump_remote.cap
function remote_snmp_get () {
    host=$1
    protocol_version=$2
    community=$3
    user=$4
    pw=$5

    $NOTE "REMOTE GET $host v$protocol_version"
    ssh -n -f $REMOTE_IPv4 "nohup tcpdump -G 10 -W 1 -i any -w $TCPDUMP_REMOTE_CAP >/dev/null 2>&1 &"
    if [ $protocol_version == "3" ]; then
	ssh $REMOTE_IPv4 "snmpget -v 3 -a MD5 -A $pw -l authNoPriv -u $user $host system.sysDescr.0"
    else
	ssh $REMOTE_IPv4 "snmpget -v $protocol_version -c $community $host system.sysDescr.0"
    fi
    sleep 4
    ssh $REMOTE_IPv4 "tcpdump -T snmp -r $TCPDUMP_REMOTE_CAP port $SNMPD_PORT"
}

function remote_snmp_get_ip ()
{
    host=$1

    for p in $SNMP_PROTOCOLS; do
	remote_snmp_get $host $p $SNMP_COMMUNITY $USER $PW
    done;
}


function snmp_trap () {
    host=$1
    protocol_version=$2
    community=$3
    user=$4
    pw=$5

    trap_oid="NET-SNMP-EXAMPLES-MIB::netSnmpExampleHeartbeatNotification"
    oid=netSnmpExampleHeartbeatRate
    #trap_oid=SNMPv2-MIB::snmpTrapOID.0
    #oid=coldStart.0

    #debug=-Ddumph_send,dumpv_send,usm

    $NOTE "TRAP $host v$protocol_version"
    if [ $protocol_version == "1" ]; then
	snmptrap $debug -v $protocol_version -c $community $host $trap_oid ""  6 17 ""  $oid i 111
    elif [ $protocol_version == "2c" ]; then
	snmptrap $debug -v $protocol_version -c $community $host "" $trap_oid $oid i 222
    else
	snmptrap $debug -e 80001f8880523983647b8b0357 -v $protocol_version -c $community -a MD5 -A $pw -x AES -X $pw -l authPriv -u $user $host "" $trap_oid $oid i 333
	snmpinform -v $protocol_version -u $user -a MD5 -A $pw -l authNoPriv $host "" $oid
    fi
}

function snmp_trap_ip ()
{
    host=$1

    for p in $SNMP_PROTOCOLS; do
	snmp_trap $host $p $SNMP_COMMUNITY $USER $PW
    done
}

TCPDUMP_CAP=/tmp/tcpdump.pcap
function tcpdump_capture ()
{
    interface=$1
    rotate_seconds=$2
    filecount=1

    tcpdump -G $rotate_seconds -W $filecount -w $TCPDUMP_CAP -i $interface &
    sleep 1
}

function tcpdump_read ()
{
    sleep $1
    # workaround: need a last package to close the tcpdump capture
    ping6 -c 1 ::1 >/dev/null

    tcpdump -T snmp -r $TCPDUMP_CAP port $SNMPD_PORT
}

###########################################
# main
snmp_kill
prepare_user
prepare_ip
if [ "$REMOTE" == "yes" ]; then
   prepare_remote
fi

snmp_start
$NOTE $(date)

if [ "$TCPDUMP" == "yes" ]; then
    tcpdump_capture lo 4
fi
if [ "$IPv4" == "yes" ]; then
    snmp_get_ip $IPv4_HOST:$SNMPD_PORT
    snmp_get_ip $IPv4_LO:$SNMPD_PORT
    snmp_get_ip $IPv4_DEV0:$SNMPD_PORT
fi
if [ "$IPv6" == "yes" ]; then
    snmp_get_ip $IPv6_HOST:$SNMPD_PORT
    snmp_get_ip udp6:[$IPv6_LO]:$SNMPD_PORT
    snmp_get_ip udp6:[$IPv6_DEV0]:$SNMPD_PORT
fi
if [ "$TCPDUMP" == "yes" ]; then
    tcpdump_read 4
fi

if [ "$REMOTE" == "yes" ]; then
    remote_snmp_get_ip $IPv4_LO:$SNMPD_PORT
    remote_snmp_get_ip $IPv4_DEV0:$SNMPD_PORT
    remote_snmp_get_ip udp6:[$IPv6_LO]:$SNMPD_PORT
    remote_snmp_get_ip udp6:[$IPv6_DEV0]:$SNMPD_PORT
fi

#snmp_walk_ip $IPv4_HOST:$SNMPD_PORT
#snmp_walk_ip $IPv6_HOST:$SNMPD_PORT

#snmp_trap_ip $IPv4_HOST:$SNMPTRAPD_PORT
#snmp_trap_ip $IPv6_HOST:$SNMPTRAPD_PORT

snmp_check_servers
