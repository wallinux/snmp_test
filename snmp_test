#!/bin/bash

[ -z "$IPv4" ] && IPv4=yes
[ -z "$IPv6" ] && IPv6=yes
[ -z "$DTLSUDP" ] && DTLSUDP=no
[ -z "$REMOTE" ] && REMOTE=no
[ -z "$TCPDUMP" ] && TCPDUMP=no
[ -z "$TRACE" ] && TRACE=yes
[ -z "$SHOWLOGS" ] && SHOWLOGS=yes
[ -z "$DEBUG" ] && DEBUG=no

[ -z "$IPv4_HOST" ] && IPv4_HOST=0.0.0.0
[ -z "$IPv6_HOST" ] && IPv6_HOST=udp6:[::1]
[ -z "$IPDEV0" ] && IPDEV0=eth0
[ -z "$IPREMOTEDEV0" ] && IPREMOTEDEV0=eth0
[ -z "$SNMPD_CONF_IN" ] && SNMPD_CONF_IN=snmpd.conf
[ -z "$SNMPTRAPD_CONF" ] && SNMPTRAPD_CONF=snmptrapd.conf
[ -z "$REMOTE_IPv4" ] && REMOTE_IPv4=128.224.95.182
[ -z "$SNMP_PROTOCOLS" ] && SNMP_PROTOCOLS="2c"
[ -z "$SNMP_COMMUNITY" ] && SNMP_COMMUNITY=public

#####################################################################
TESTDIR=/tmp/test
CERTDIR=/tmp/cert

SNMPD_LOG=$TESTDIR/snmpd.log
SNMPD_PID=$TESTDIR/snmpd.pid
SNMPD_CONF=$TESTDIR/snmpd.conf
SNMPD_PORT=161
DTLSUDP_PORT=10161

SNMPTRAPD_LOG=$TESTDIR/snmptrapd.log
SNMPTRAPD_PID=$TESTDIR/snmptrapd.pid
SNMPTRAPD_PORT=162
SNMPTRAPD_DTLSUDP_PORT=10162

SNMP_CONF=$TESTDIR/snmp.conf

PRIMEUSER=primeuser
TSMUSER=tsmuser
PRIMEHOSTNAME=e.prime.com
PRIMECA=ca.prime.org
PRIMEPW=kalle123

IPv4_LO=172.16.1.100
IPv4_DEV0=128.224.95.181
IPv6_LO=2001:1b70:82a8:90:e085::10
IPv6_DEV0=2001:1b70:82a8:90:1284:31:0:2
IPv6_REMOTE_DEV0=2001:1b70:82a8:90:1284:31:0:4

HEAD="head -3"
NOTE='echo -e \n--- '

NET_SNMP_CERT=net-snmp-cert

#####################################################################
function snmp_kill () {
    # Kill all running snmp servers
    killall snmpd
    killall snmptrapd
    sleep 1
}

function prepare () {
    if [ ! -e $TESTDIR ]; then
	mkdir -p $TESTDIR
    fi

    prepare_ip
    prepare_remote
    prepare_dtlsudp
}

PREPARE_REMOTE=$TESTDIR/prepare_remote
function prepare_remote () {
    if [ "$REMOTE" == "yes" ]; then
	if [ ! -e $PREPARE_REMOTE ]; then
	    $NOTE "Preparing ip remote"
	    ssh $REMOTE_IPv4 ifconfig $IPREMOTEDEV0 inet6 add $IPv6_REMOTE_DEV0/128
	    ssh $REMOTE_IPv4 ip -6 route add default dev $IPREMOTEDEV0
	    ssh $REMOTE_IPv4 ip -6 route add via $IPv6_DEV0 $IPv6_LO
	    ssh $REMOTE_IPv4 ip -4 route add via $IPv4_DEV0 $IPv4_LO
	    scp $SNMPTRAPD_CONF $REMOTE_IPv4:
	    ssh $REMOTE_IPv4 snmptrapd -c $SNMPTRAPD_CONF -Lf $SNMPTRAPD_LOG -p $SNMPTRAPD_PID udp:$SNMPTRAPD_PORT,udp6:$SNMPTRAPD_PORT
	    touch $PREPARE_REMOTE
	else
	    $NOTE "remote ip already prepared"
	fi
    fi
}

PREPARE_IP=$TESTDIR/prepare_ip
function prepare_ip () {
    if [ ! -e $PREPARE_IP ]; then
	$NOTE "Preparing ip addresses"
	ifconfig lo inet add $IPv4_LO
	ifconfig lo inet6 add $IPv6_LO/128
	ifconfig $IPDEV0 inet6 add $IPv6_DEV0/80
	touch $PREPARE_IP
    else
	$NOTE "IP addresses already prepared"
    fi
}

function prepare_dtlsudp ()
{
    if [ "$DTLSUDP" == "yes" ]; then
	create_cert
	get_cert
	create_snmp_conf
    fi
    
    create_snmpd_conf
    export_env
}

function create_cert ()
{
    $NOTE $FUNCNAME
    if [ ! -d $CERTDIR ]; then
	$NET_SNMP_CERT genca -I --cn $PRIMECA -C $CERTDIR
	$NET_SNMP_CERT gencert -I -t snmpd --with-ca $PRIMECA --cn $PRIMEHOSTNAME -C $CERTDIR
	$NET_SNMP_CERT gencert -I -t snmpapp --cn $TSMUSER -C $CERTDIR
	chmod 755 $CERTDIR/tls $CERTDIR/tls/ca-certs $CERTDIR/tls/certs
	chmod a+r $CERTDIR/tls/ca-certs/* $CERTDIR/tls/certs/*
    fi
}

function get_cert ()
{
    $NOTE $FUNCNAME

    serverCert=$($NET_SNMP_CERT showcert --fingerprint --brief snmpd -C $CERTDIR)
    appCert=$($NET_SNMP_CERT showcert --fingerprint --brief snmpapp -C $CERTDIR)
    caCert=$($NET_SNMP_CERT showcas --fingerprint --brief $PRIMECA -C $CERTDIR)

    echo PRIMEUSER:  $PRIMEUSER
    echo TSMUSER:    $TSMUSER
    echo serverCert: $serverCert
    echo appCert:    $appCert
    echo caCert:     $caCert
}


function create_snmpd_conf ()
{
    $NOTE $FUNCNAME

    cp $SNMPD_CONF_IN $SNMPD_CONF
    echo "createUser $PRIMEUSER MD5 $PRIMEPW DES $PRIMEPW" >> $SNMPD_CONF
    echo "rwuser $PRIMEUSER" >> $SNMPD_CONF
  
    if [ "$DTLSUDP" == "yes" ]; then
	echo "[snmp] localCert $serverCert" >> $SNMPD_CONF
	echo "certSecName 10 $appCert --cn" >> $SNMPD_CONF
#	echo "certSecName 20 $appCert --sn snmpapp" >> $SNMPD_CONF
	echo "rwuser -s tsm $TSMUSER authpriv" >>$SNMPD_CONF
    fi
}

function create_snmp_conf ()
{
    $NOTE $FUNCNAME

    echo "localCert $appCert" > $SNMP_CONF
    echo --- $SNMP_CONF
    cat $SNMP_CONF
}

function export_env ()
{
    $NOTE $FUNCNAME

    export SNMP_PERSISTENT_DIR=$TESTDIR/persist
    export SNMPCONFPATH=$TESTDIR:$CERTDIR:$SNMP_PERSISTENT_DIR
    mkdir -p $SNMP_PERSISTENT_DIR
}

function show_logs () {
    if [ "$SHOWLOGS" == yes ]; then
	$NOTE "$SNMPD_LOG"
	cat $SNMPD_LOG
	$NOTE "$SNMPTRAPD_LOG"
	cat $SNMPTRAPD_LOG
    fi
}

function snmp_check_servers () {
    # check if the servers where started
    if [ "$TRACE" == yes ]; then
	$NOTE "ps snmp"
	ps -ef | grep snmp
	$NOTE "Check open ports"
	netstat -tulpn | grep snmp
    fi
    show_logs
}

function snmp_start () {
    if [ "$DEBUG" == yes ]; then
	#snmptrapd_debug=-DALL
	snmptrapd_debug=-Dtrap,usm
	snmpd_debug=-Dtrap,trapsess,example_notification,dlmod,ericssonDiscoveryMIB,netsnmp_sockaddr_in6_2,netsnmp_udp6,netsnmp_ipv6,snmpTargetAddrEntry,tdomain
	#snmpd_debug=-Dtrap,transport,usm,trapsess,netsnmp_udp6,netsnmp_sockaddr_in6,snmpd_ports,socket:option,udpbase:sendto,netsnmp_udp,netsnmp_udp6,netsnmp_ipv6
#	snmpd_debug=-DALL

	SHOWLOGS=yes
    fi

    # Start snmp servers
    snmpd_servers=()
    snmptrapd_servers=()
    if [ "$IPv4" == "yes" ]; then
	snmpd_servers+=("udp:0.0.0.0:$SNMPD_PORT")
	snmptrapd_servers+=("udp:$SNMPTRAPD_PORT")
    fi
    if [ "$IPv6" == "yes" ]; then
	snmpd_servers+=("udp6:[$IPv6_LO]:$SNMPD_PORT")
	snmpd_servers+=("udp6:[::]:$SNMPD_PORT")
	snmptrapd_servers+=("udp6:$SNMPTRAPD_PORT")
    fi
    if [ "$DTLSUDP" == "yes" ]; then
	snmpd_servers+=("dtlsudp:0.0.0.0:$DTLSUDP_PORT")
	snmpd_servers+=("dtlsudp:[::]:$DTLSUDP_PORT")
	snmptrapd_servers+=("dtlsudp:0.0.0.0:$SNMPTRAPD_DTLSUDP_PORT")
	snmptrapd_servers+=("dtlsudp:[::]:$SNMPTRAPD_DTLSUDP_PORT")
    fi
#    mibs="-I -system_mib -I -at -I -icmp -I -udp -I -udpTable -I -udpEndpointTable -I -ifTable -I -tcp -I -tcpListenerTable \
#          -I -tcpConnectionTable -I -tcpTable -I -sysORTable -I -ip -I -ipIfStatsTable -I -ip_scalars -I -ipCidrRouteTable \
#	  -I -inetCidrRouteTable -I -ipDefaultRouterTable -I -ipSystemStatsTable -I -ipAddressTable -I -ipAddressPrefixTable \
#	  -I -inetNetToMediaTable -I -notification_log -I -hrSWRunTable -I -hrSWRunPerfTable -I -hrSWInstalledTable \
#	  -I -hr_system -I -hr_disk -I -hr_proc -I -hr_device -I -hr_partition -I -hrh_storage -I -hrh_filesys -I -mteObjects \
#	  -I -mteObjectsTable -I -mteObjectsConf -I -mteEvent -I -mteEventConf -I -mteScalars "

    set -x
    snmptrapd $snmptrapd_debug -c $SNMPTRAPD_CONF -Lf $SNMPTRAPD_LOG -p $SNMPTRAPD_PID ${snmptrapd_servers[@]}
    snmpd $snmpd_debug $mibs -C -c $SNMPD_CONF -Lf $SNMPD_LOG -p $SNMPD_PID ${snmpd_servers[@]}
    set +x
}

function snmp_walk () {
    host=$1
    protocol_version=$2
    community=$3
    user=$4
    pw=$5

    $NOTE "WALK $host v$protocol_version"
    if [ $protocol_version == "3" ]; then
	snmpwalk -v 3 -a MD5 -A $pw -l authNoPriv -u $user $host . | $HEAD
    else
	snmpwalk -v $protocol_version -c $community $host | $HEAD
    fi
}

function snmp_walk_ip ()
{
    host=$1

    for p in $SNMP_PROTOCOLS; do
	snmp_walk $host $p $SNMP_COMMUNITY $PRIMEUSER $PRIMEPW
    done
}

function snmp_get () {
    host=$1
    protocol_version=$2
    community=$3
    user=$4
    pw=$5
    option=$6
    
    oid=system.sysDescr.0

    $NOTE "GET $host v$protocol_version $oid"
    if [ $protocol_version == "3" ]; then
	if [ "$option" == "" ]; then
	    snmpget -v $protocol_version -a MD5 -A $pw -l authNoPriv -u $user $host $oid
	else
	    snmpget $option -v $protocol_version  $host $oid
	fi
    else
	snmpget $option -v $protocol_version -c $community $host $oid
    fi
}

function snmp_get_ip ()
{
    host=$1
    get_option=$2

    for p in $SNMP_PROTOCOLS; do
	snmp_get $host $p $SNMP_COMMUNITY $PRIMEUSER $PRIMEPW "$get_option" 
    done;
}

TCPDUMP_REMOTE_CAP=/tmp/tcpdump_remote.cap
function remote_snmp_get () {
    host=$1
    protocol_version=$2
    community=$3
    user=$4
    pw=$5

    oid=system.sysDescr.0

    $NOTE "REMOTE GET $host v$protocol_version"
    ssh -n -f $REMOTE_IPv4 "nohup tcpdump -G 10 -W 1 -i any -w $TCPDUMP_REMOTE_CAP >/dev/null 2>&1 &"
    if [ $protocol_version == "3" ]; then
	ssh $REMOTE_IPv4 "snmpget -v 3 -a MD5 -A $pw -l authNoPriv -u $user $host $oid"
    else
	ssh $REMOTE_IPv4 "snmpget -v $protocol_version -c $community $host $oid"
    fi
    sleep 4
    ssh $REMOTE_IPv4 "tcpdump -T snmp -r $TCPDUMP_REMOTE_CAP port $SNMPD_PORT"
}

function remote_snmp_get_ip ()
{
    host=$1

    for p in $SNMP_PROTOCOLS; do
	remote_snmp_get $host $p $SNMP_COMMUNITY $PRIMEUSER $PRIMEPW
    done;
}


function snmp_trap () {
    host=$1
    protocol_version=$2
    community=$3
    user=$4
    pw=$5

    trap_oid="NET-SNMP-EXAMPLES-MIB::netSnmpExampleHeartbeatNotification"
    oid=netSnmpExampleHeartbeatRate
    #trap_oid=SNMPv2-MIB::snmpTrapOID.0
    #oid=coldStart.0

    #trap_debug=-Ddumph_send,dumpv_send,usm

    $NOTE "TRAP $host v$protocol_version"
    set -x 
    if [ $protocol_version == "1" ]; then
	snmptrap $trap_debug -v $protocol_version -c $community $host $trap_oid ""  6 17 ""  $oid i 111
    elif [ $protocol_version == "2c" ]; then
	snmptrap $trap_debug -v $protocol_version -c $community $host "" $trap_oid $oid i 222
    else
	snmptrap $trap_debug -e 80001f8880523983647b8b0357 -v $protocol_version -c $community -a MD5 -A $pw -x AES -X $pw -l authPriv -u $user $host "" $trap_oid $oid i 333
	snmpinform -v $protocol_version -u $user -a MD5 -A $pw -l authNoPriv $host "" $oid
    fi
    set +x
}

function snmp_trap_ip ()
{
    host=$1

    for p in $SNMP_PROTOCOLS; do
	snmp_trap $host $p $SNMP_COMMUNITY $PRIMEUSER $PRIMEPW
    done
}

TCPDUMP_CAP=$TESTDIR/tcpdump.pcap
function tcpdump_capture ()
{
    interface=$1
    rotate_seconds=$2
    filecount=1

    if [ "$TCPDUMP" == "yes" ]; then
	tcpdump -G $rotate_seconds -W $filecount -w $TCPDUMP_CAP -i $interface &
	sleep 1
    fi
}

function tcpdump_read ()
{
    if [ "$TCPDUMP" == "yes" ]; then
	sleep $1
	# workaround: need a last package to close the tcpdump capture
	ping6 -c 1 ::1 >/dev/null

	tcpdump -T snmp -r $TCPDUMP_CAP port $SNMPD_PORT
    fi
}

###########################################
# main
snmp_kill

prepare

snmp_start

$NOTE $(date)

tcpdump_capture lo 4

if [ "$IPv4" == "yes" ]; then
    snmp_get_ip $IPv4_HOST:$SNMPD_PORT
    snmp_get_ip $IPv4_LO:$SNMPD_PORT
    snmp_get_ip $IPv4_DEV0:$SNMPD_PORT
fi
if [ "$IPv6" == "yes" ]; then
    snmp_get_ip $IPv6_HOST:$SNMPD_PORT
    snmp_get_ip udp6:[$IPv6_LO]:$SNMPD_PORT
    snmp_get_ip udp6:[$IPv6_DEV0]:$SNMPD_PORT
fi
if [ "$DTLSUDP" == "yes" ]; then
    snmp_get_ip dtlsudp:127.0.0.1:$DTLSUDP_PORT "-T their_identity=$serverCert" 
    snmp_get_ip dtlsudp:[::1]:$DTLSUDP_PORT "-T their_identity=$serverCert" 
fi

tcpdump_read 4

if [ "$REMOTE" == "yes" ]; then
    remote_snmp_get_ip $IPv4_LO:$SNMPD_PORT
    remote_snmp_get_ip $IPv4_DEV0:$SNMPD_PORT
    remote_snmp_get_ip udp6:[$IPv6_LO]:$SNMPD_PORT
    remote_snmp_get_ip udp6:[$IPv6_DEV0]:$SNMPD_PORT
fi

#snmp_walk_ip $IPv4_HOST:$SNMPD_PORT
#snmp_walk_ip $IPv6_HOST:$SNMPD_PORT

snmp_trap_ip $IPv4_HOST:$SNMPTRAPD_PORT
snmp_trap_ip $IPv6_HOST:$SNMPTRAPD_PORT
snmp_trap_ip dtlsudp:127.0.0.1:$SNMPTRAPD_DTLSUDP_PORT
snmp_trap_ip dtlsudp:[::1]:$SNMPTRAPD_DTLSUDP_PORT

snmp_check_servers
