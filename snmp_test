#!/bin/bash

[ -z "$GET" ] && GET=yes
[ -z "$WALK" ] && WALK=no
[ -z "$TRAP" ] && TRAP=no

[ -z "$IPv4" ] && IPv4=yes
[ -z "$IPv6" ] && IPv6=no
[ -z "$DTLSUDP4" ] && DTLSUDP4=no
[ -z "$DTLSUDP6" ] && DTLSUDP6=no
[ -z "$TCPDUMP" ] && TCPDUMP=no
[ -z "$REMOTE" ] && REMOTE=no
[ -z "$REMOTE_TCPDUMP" ] && REMOTE_TCPDUMP=no
[ -z "$TRACE" ] && TRACE=no
[ -z "$SHOWLOGS" ] && SHOWLOGS=no
[ -z "$DEBUG" ] && DEBUG=no
[ -z "$SNMP_PROTOCOL" ] && SNMP_PROTOCOL="3"
[ -z "$SETX" ] && SETX=""

[ -z "$IPDEV0" ] && IPDEV0=eth0
[ -z "$LOCAL_HOSTNAME" ] && LOCAL_HOSTNAME=amarillo1.prime.com

[ -z "$REMOTE_IPDEV0" ] && REMOTE_IPDEV0=eth0
[ -z "$REMOTE_IPv4" ] && REMOTE_IPv4=128.224.95.182
[ -z "$REMOTE_IPv6" ] && REMOTE_IPv6=fe80::202:2dff:fe84:135d
[ -z "$REMOTE_HOSTNAME" ] && REMOTE_HOSTNAME=amarillo2.prime.com

#####################################################################
TESTDIR=/tmp/snmp/test
CERTDIR=/tmp/snmp/cert

SNMPD_LOG=$TESTDIR/snmpd.log
SNMPD_PID=$TESTDIR/snmpd.pid
SNMPD_CONF_IN=snmpd.conf
SNMPD_CONF=$TESTDIR/snmpd.conf
SNMPD_PORT=161

SNMPTRAPD_LOG=$TESTDIR/snmptrapd.log
SNMPTRAPD_PID=$TESTDIR/snmptrapd.pid
SNMPTRAPD_CONF_IN=snmptrapd.conf
SNMPTRAPD_CONF=$TESTDIR/snmptrapd.conf
SNMPTRAPD_PORT=162
SNMPTRAPD_DTLSUDP_PORT=10162

SNMP_CONF_IN=snmp.conf
SNMP_CONF=$TESTDIR/snmp.conf

SNMP_COMMUNITY=public
SNMPINFORM_LOG=$TESTDIR/snmpinform.log
SNMPTRAP_LOG=$TESTDIR/snmptrap.log
SNMPGET_LOG=$TESTDIR/snmpget.log
SNMPWALK_LOG=$TESTDIR/snmpwalk.log
SNMPWALK_OUT=$TESTDIR/snmpwalk.out

DTLSUDP_PORT=10161

LOGTIMESTAMP="logTimestamp 0"

NET_SNMP_CERT=net-snmp-cert

TSM_USER=tsmuser
PRIME_CA=ca.prime.com

USM_USER=usmuser
USM_PW=kalle123
USM_EID=80001f8880523983647b8b0357

IPv4_HOST=0.0.0.0
IPv4_LO=127.0.0.1
IPv4_EXTRA=172.16.1.100
IPv4_DEV0=$(ip -o -4 addr list $IPDEV0 | awk '{print $4}' | cut -d/ -f1)

IPv6_HOST=::
IPv6_LO=::1
IPv6_EXTRA=2001:1b70:82a8:90:e085::10
IPv6_DEV0=$(ip -o -6 addr list $IPDEV0 | awk '{print $4}' | cut -d/ -f1)

NOTE='echo -e \n--- '
HEAD="head -3"

TRAP_OID="NET-SNMP-EXAMPLES-MIB::netSnmpExampleHeartbeatNotification"
OID=netSnmpExampleHeartbeatRate
#TRAP_OID=SNMPv2-MIB::snmpTrapOID.0
#OID=coldStart.0

get_status=0
trap_status=0
walk_status=0
remote_get_status=0
remote_trap_status=0
remote_walk_status=0

#####################################################################
function snmp_kill () {
    $NOTE "Kill all running snmp servers"

    killall snmpd
    killall snmptrapd
    sleep 1

    rm -f $SNMPTRAPD_LOG* $SNMPTRAPD_PID
    rm -f $SNMPD_LOG $SNMPD_PID
}

function prepare () {
    if [ ! -e $TESTDIR ]; then
	mkdir -p $TESTDIR
    fi

    prepare_ip
    prepare_config
    prepare_remote
}

PREPARE_REMOTE=$TESTDIR/prepare_remote
function prepare_remote () {
    #local snmptrapd_debug="-Dtrap,usm,tsm,dtlsudp,tsm,9:dtlsudp,9:dtlsudp:* -d"
    local snmptrapd_servers=()

    if [ "$REMOTE" == "yes" ]; then
	if [ ! -e $PREPARE_REMOTE ]; then
	    $NOTE "preparing remote IP"
	    ssh $REMOTE_IPv4 "hostname $REMOTE_HOSTNAME"
	    ssh $REMOTE_IPv4 "killall snmptrapd"
	    ssh $REMOTE_IPv4 "ip -6 route add default dev $REMOTE_IPDEV0"
	    ssh $REMOTE_IPv4 "ip -6 route add via $IPv6_DEV0 $IPv6_EXTRA dev $REMOTE_IPDEV0"
	    ssh $REMOTE_IPv4 "ip -4 route add via $IPv4_DEV0 $IPv4_EXTRA dev $REMOTE_IPDEV0"
	    ssh $REMOTE_IPv4 "rm -rf $TESTDIR $CERTDIR"
	    ssh $REMOTE_IPv4 "mkdir -p $TESTDIR $CERTDIR $SNMP_PERSISTENT_DIR"
	    rsync -az $TESTDIR/ $REMOTE_IPv4:$TESTDIR
	    rsync -az $CERTDIR/ $REMOTE_IPv4:$CERTDIR
	    touch $PREPARE_REMOTE
	fi
	snmptrapd_servers+=("udp:$SNMPTRAPD_PORT")
	snmptrapd_servers+=("udp6:$SNMPTRAPD_PORT")
	snmptrapd_servers+=("dtlsudp:$IPv4_HOST:$SNMPTRAPD_DTLSUDP_PORT")
	snmptrapd_servers+=("dtlsudp6:[$IPv6_HOST]:$SNMPTRAPD_DTLSUDP_PORT")

	$NOTE "starting remote snmptrapd"
	ssh $REMOTE_IPv4 "killall snmptrapd"
	ssh $REMOTE_IPv4 "rm -f SNMPTRAPD_LOG SNMPTRAPD_PID"
	echo "REMOTE: snmptrapd $snmptrapd_debug -C -c $SNMPTRAPD_CONF -Lf $SNMPTRAPD_LOG -p $SNMPTRAPD_PID ${snmptrapd_servers[@]}"
	ssh $REMOTE_IPv4 "source $SNMPENV; snmptrapd $snmptrapd_debug -C -c $SNMPTRAPD_CONF -Lf $SNMPTRAPD_LOG -p $SNMPTRAPD_PID ${snmptrapd_servers[@]}"
    fi
}

PREPARE_IP=$TESTDIR/prepare_ip
function prepare_ip () {
    $NOTE $FUNCNAME

    if [ ! -e $PREPARE_IP ]; then
	$NOTE "Preparing ip addresses"
	ifconfig lo inet add $IPv4_EXTRA
	ifconfig lo inet6 add $IPv6_EXTRA/128
	touch $PREPARE_IP
    else
	$NOTE "IP addresses already prepared"
    fi
}

function prepare_config ()
{
    $NOTE $FUNCNAME

    create_cert
    get_cert
    create_snmp_conf $SNMP_CONF_IN $SNMP_CONF
    create_snmpd_conf $SNMPD_CONF_IN $SNMPD_CONF
    create_snmptrapd_conf $SNMPTRAPD_CONF_IN $SNMPTRAPD_CONF
    export_env
}

function create_cert ()
{
    $NOTE $FUNCNAME

    if [ ! -d $CERTDIR ]; then
	hostname $LOCAL_HOSTNAME
	$NET_SNMP_CERT genca -I -n $PRIME_CA -e admin@prime.com -C $CERTDIR
	$NET_SNMP_CERT gencert -I -t snmpd --with-ca $PRIME_CA --cn $LOCAL_HOSTNAME -C $CERTDIR
	$NET_SNMP_CERT gencert -I -t snmpapp --cn $TSM_USER -C $CERTDIR
	$NET_SNMP_CERT gencert -I -t snmptrapd --cn $TSM_USER -C $CERTDIR
	#chmod 755 $CERTDIR/tls $CERTDIR/tls/ca-certs $CERTDIR/tls/certs
	#chmod a+r $CERTDIR/tls/ca-certs/* $CERTDIR/tls/certs/*
    fi
}

function get_cert ()
{
    $NOTE $FUNCNAME

    serverCert=$($NET_SNMP_CERT showcert --fingerprint --brief snmpd -C $CERTDIR)
    appCert=$($NET_SNMP_CERT showcert --fingerprint --brief snmpapp -C $CERTDIR)
    trapdCert=$($NET_SNMP_CERT showcert --fingerprint --brief snmptrapd -C $CERTDIR)
    caCert=$($NET_SNMP_CERT showca --fingerprint --brief $PRIME_CA -C $CERTDIR)

    if [ "$TRACE" == "yes" ]; then
	echo USM_USER:   $USM_USER
	echo TSM_USER:   $TSM_USER
	echo serverCert: $serverCert
	echo appCert:    $appCert
	echo trapdCert:  $trapdCert
	echo caCert:     $caCert
    fi
}


function create_snmpd_conf ()
{
    local conf_in=$1
    local conf=$2

    $NOTE $FUNCNAME

    cp $conf_in $conf

#    echo "[snmp] clientaddr [$IPv6_EXTRA]" >> $conf
#    echo "[snmp] clientaddr $IPv4_EXTRA" >> $conf
    echo "createUser $USM_USER MD5 $USM_PW DES $USM_PW" >> $conf
    echo "rwuser $USM_USER" >> $conf

    echo "trapcommunity public" >> $conf
    if [ $SNMP_PROTOCOL == "3" ]; then
	echo "trapsess -Ci -v 3 -e $USM_EID -a MD5 -A $USM_PW -x AES -X $USM_PW -l authPriv -u $USM_USER udp:$IPv4_DEV0:$SNMPTRAPD_PORT" >> $conf
	echo "trapsess -Ci -v 3 -e $USM_EID -a MD5 -A $USM_PW -x AES -X $USM_PW -l authPriv -u $USM_USER udp6:$IPv6_DEV0:$SNMPTRAPD_PORT" >> $conf
	echo "trapsess -Ci -v 3 -e $USM_EID -a MD5 -A $USM_PW -x AES -X $USM_PW -l authPriv -u $USM_USER udp:$REMOTE_IPv4:$SNMPTRAPD_PORT" >> $conf
	echo "trapsess -Ci -v 3 -e $USM_EID -a MD5 -A $USM_PW -x AES -X $USM_PW -l authPriv -u $USM_USER udp6:$REMOTE_IPv6:$SNMPTRAPD_PORT" >> $conf
    elif [ $SNMP_PROTOCOL == "2c" ]; then
	echo "trap2sink udp:$IPv4_LO:$SNMPTRAPD_PORT" >> $conf
	echo "trap2sink udp6:[$IPv6_LO]:$SNMPTRAPD_PORT" >> $conf
	echo "trap2sink udp:$REMOTE_IPv4:$SNMPTRAPD_PORT" >> $conf
	echo "trap2sink udp6:[$REMOTE_IPv6]:$SNMPTRAPD_PORT" >> $conf
    fi

    if [ "$DTLSUDP4" == "yes" ] || [ "$DTLSUDP6" == "yes" ]; then
	echo "[snmp] trustCert $caCert" >> $conf
	echo "[snmp] localCert $serverCert" >> $conf
	echo "certSecName 10 $appCert --cn" >> $conf
	echo "rwuser -s tsm $TSM_USER authpriv" >> $conf

	if [ "$DTLSUDP4" == "yes" ]; then
	    echo "trapsess -Ci -v 3 -T localCert=$appCert -T peerCert=$serverCert dtlsudp:$IPv4_LO:$SNMPTRAPD_DTLSUDP_PORT" >> $conf
	    echo "trapsess -Ci -v 3 -T localCert=$appCert -T peerCert=$serverCert dtlsudp:$REMOTE_IPv4:$SNMPTRAPD_DTLSUDP_PORT" >> $conf
	fi
	if [ "$DTLSUDP6" == "yes" ]; then
	    echo "trapsess -v 3 -T localCert=$appCert -T peerCert=$serverCert dtlsudp6:[$IPv6_LO]:$SNMPTRAPD_DTLSUDP_PORT" >> $conf
	    echo "trapsess -v 3 -T localCert=$appCert -T peerCert=$serverCert dtlsudp6:[$REMOTE_IPv6]:$SNMPTRAPD_DTLSUDP_PORT" >> $conf
	fi
    fi
    echo [snmp] $LOGTIMESTAMP >> $conf
}

function create_snmptrapd_conf ()
{
    local conf_in=$1
    local conf=$2

    $NOTE $FUNCNAME

    cp $conf_in $conf
    echo createUser -e $USM_EID $USM_USER MD5 \"$USM_PW\" AES \"$USM_PW\" >> $conf
    echo "authUser log $USM_USER" >> $conf

    if [ "$DTLSUDP4" == "yes" ] || [ "$DTLSUDP6" == "yes" ]; then
	echo "[snmp] trustCert $caCert" >> $conf
	echo "[snmp] localCert $serverCert" >> $conf
	echo "certSecName 9 $appCert --cn" >> $conf
#	echo "certSecName 100 $caCert  --rfc822" >> $conf
	echo "authuser log -s tsm $TSM_USER authpriv" >> $conf
    fi
    echo [snmp] $LOGTIMESTAMP >> $conf
}

function create_snmp_conf ()
{
    local conf_in=$1
    local conf=$2

    $NOTE $FUNCNAME

    cp $conf_in $conf
    echo "defCommunity $SNMP_COMMUNITY" >> $conf
#    echo "clientaddr $IPv4_EXTRA" >> $conf
    if [ "$DTLSUDP4" == "yes" ] || [ "$DTLSUDP6" == "yes" ]; then
	echo "localCert $appCert" >> $conf
	echo "peerCert  $serverCert" >> $conf
    fi
    echo $LOGTIMESTAMP >> $conf

}

SNMPENV=$TESTDIR/snmpenv
function export_env ()
{
    $NOTE $FUNCNAME

    echo "export SNMP_PERSISTENT_DIR=$TESTDIR/persist" > $SNMPENV
    echo "export SNMPCONFPATH=$TESTDIR:$CERTDIR:$SNMP_PERSISTENT_DIR" >> $SNMPENV
    source $SNMPENV
    mkdir -p $SNMP_PERSISTENT_DIR
}

function show_logs () {
    if [ "$SHOWLOGS" == yes ]; then
	$NOTE "$SNMPD_LOG"
	cat $SNMPD_LOG
	$NOTE "$SNMPTRAPD_LOG"
	cat $SNMPTRAPD_LOG
	if [ "$REMOTE" == "yes" ]; then
	    $NOTE "REMOTE $SNMPTRAPD_LOG"
	    ssh $REMOTE_IPv4 "cat $SNMPTRAPD_LOG"
	fi
    fi
}

function snmp_check_servers () {
    # check if the servers where started
    if [ "$TRACE" == yes ]; then
	$NOTE "ps snmp"
	ps -ef | grep snmp
	$NOTE "Check open ports"
	netstat -tulpn | grep snmp
    fi
    show_logs
}

function snmp_start () {
    $NOTE $FUNCNAME
    local snmpd_servers=()
    local snmptrapd_servers=()
    local snmpd_debug=""
    local snmptrapd_debug=""

    if [ "$DEBUG" == yes ]; then
	#snmptrapd_debug=-DALL
	snmptrapd_debug="-Dtrap,usm,tsm,dtlsudp,tsm,9:dtlsudp,9:dtlsudp:* -d"
	#snmpd_debug=-Dtrap,trapsess,example_notification,dlmod,ericssonDiscoveryMIB,netsnmp_sockaddr_in6_2,netsnmp_udp6,netsnmp_ipv6,snmpTargetAddrEntry,tdomain
	snmpd_debug=-Ddtlsudp,tsm,9:dtlsudp,9:dtlsudp:*
	#snmpd_debug=-Dtrap,transport,usm,trapsess,netsnmp_udp6,netsnmp_sockaddr_in6,snmpd_ports,socket:option,udpbase:sendto,netsnmp_udp,netsnmp_udp6,netsnmp_ipv6
	#snmpd_debug=-DALL

	SHOWLOGS=yes
    fi
    #local snmpd_debug="-Dtrap,tsm,tls,dtlsudp,9:dtlsudp,9:dtlsudp:* -d"
    #local snmptrapd_debug="-Dtrap,usm,tsm,dtlsudp,tsm,9:dtlsudp,9:dtlsudp:* -d"

    # Start snmp servers
    if [ "$IPv4" == "yes" ]; then
	snmpd_servers+=("udp:$IPv4_HOST:$SNMPD_PORT")
	snmptrapd_servers+=("udp:$SNMPTRAPD_PORT")
    fi
    if [ "$IPv6" == "yes" ]; then
	snmpd_servers+=("udp6:[$IPv6_EXTRA]:$SNMPD_PORT")
	snmpd_servers+=("udp6:[$IPv6_HOST]:$SNMPD_PORT")
	snmptrapd_servers+=("udp6:$SNMPTRAPD_PORT")
    fi
    if [ "$DTLSUDP4" == "yes" ]; then
	snmpd_servers+=("dtlsudp:$IPv4_HOST:$DTLSUDP_PORT")
	snmptrapd_servers+=("dtlsudp:$IPv4_HOST:$SNMPTRAPD_DTLSUDP_PORT")
    fi
    if [ "$DTLSUDP6" == "yes" ]; then
	snmpd_servers+=("dtlsudp6:[$IPv6_HOST]:$DTLSUDP_PORT")
	snmptrapd_servers+=("dtlsudp6:[$IPv6_HOST]:$SNMPTRAPD_DTLSUDP_PORT")
    fi

    echo "snmptrapd -C -c $SNMPTRAPD_CONF -Lf $SNMPTRAPD_LOG -p $SNMPTRAPD_PID $snmptrapd_debug  ${snmptrapd_servers[@]}"
    snmptrapd -C -c $SNMPTRAPD_CONF -Lf $SNMPTRAPD_LOG -p $SNMPTRAPD_PID $snmptrapd_debug ${snmptrapd_servers[@]}
    echo "snmpd -C -c $SNMPD_CONF -Lf $SNMPD_LOG -p $SNMPD_PID $snmpd_debug ${snmpd_servers[@]}"
    snmpd -C -c $SNMPD_CONF -Lf $SNMPD_LOG -p $SNMPD_PID $snmpd_debug ${snmpd_servers[@]}
}

TCPDUMP_CAP=$TESTDIR/tcpdump.pcap
function tcpdump_capture ()
{
    local interface=$1
    local rotate_seconds=$2
    local filecount=1

    if [ "$TCPDUMP" == "yes" ]; then
	tcpdump -G $rotate_seconds -W $filecount -w $TCPDUMP_CAP -i $interface &
	sleep 1
    fi
}

function tcpdump_read ()
{
    if [ "$TCPDUMP" == "yes" ]; then
	sleep $1
	# workaround: need a last package to close the tcpdump capture
	ping6 -c 1 ::1 >/dev/null

	tcpdump -T snmp -r $TCPDUMP_CAP port $SNMPD_PORT or port $DTLSUDP_PORT
    fi
}

function snmp_get () {
    local host=$1
    local oid=system.sysDescr.0
    #local get_debug="-Dtrap,tsm,tls,dtlsudp,9:dtlsudp,9:dtlsudp:* -d"
    #local get_debug="-DALL -d"

    $NOTE "GET $host v$SNMP_PROTOCOL $oid"
    if [ $SNMP_PROTOCOL == "3" ]; then
	echo $host | grep dtlsudp >/dev/null
	if [ "$?" -eq 0 ]; then
	    # TSM
	    snmpget -Lf $SNMPGET_LOG $get_debug -v $SNMP_PROTOCOL --defSecurityModel=tsm $host $oid
	else
	    # USM
	    snmpget -v $SNMP_PROTOCOL -a MD5 -A $USM_PW -l authNoPriv -u $USM_USER $host $oid
	fi
    else
	snmpget -v $SNMP_PROTOCOL $host $oid
    fi
    get_status=$((get_status + $?))
}

function f_get()
{
    tcpdump_capture any 4
    if [ "$IPv4" == "yes" ]; then
	snmp_get $IPv4_LO:$SNMPD_PORT
	snmp_get $IPv4_EXTRA:$SNMPD_PORT
	snmp_get $IPv4_DEV0:$SNMPD_PORT
    fi
    if [ "$IPv6" == "yes" ]; then
	snmp_get udp6:[$IPv6_LO]:$SNMPD_PORT
	snmp_get udp6:[$IPv6_EXTRA]:$SNMPD_PORT
	snmp_get udp6:[$IPv6_DEV0]:$SNMPD_PORT
    fi
    if [ "$DTLSUDP4" == "yes" ]; then
	snmp_get dtlsudp:$IPv4_LO:$DTLSUDP_PORT
	snmp_get dtlsudp:$IPv4_EXTRA:$DTLSUDP_PORT
	snmp_get dtlsudp:$IPv4_DEV0:$DTLSUDP_PORT
    fi
    if [ "$DTLSUDP6" == "yes" ]; then
	snmp_get dtlsudp6:[$IPv6_LO]:$DTLSUDP_PORT
	snmp_get dtlsudp6:[$IPv6_EXTRA]:$DTLSUDP_PORT
	snmp_get dtlsudp6:[$IPv6_DEV0%$IPDEV0]:$DTLSUDP_PORT
    fi
    tcpdump_read 4
}

TCPDUMP_REMOTE_CAP=/tmp/tcpdump_remote.cap
function remote_snmp_get () {
    local host=$1
    local l_status=0
    local oid=system.sysDescr.0

    $NOTE "REMOTE GET $host v$SNMP_PROTOCOL $oid"
    if [ "$REMOTE_TCPDUMP" == "yes" ]; then
	ssh -n -f $REMOTE_IPv4 "nohup tcpdump -G 10 -W 1 -i any -w $TCPDUMP_REMOTE_CAP >/dev/null 2>&1 &"
    fi
    if [ $SNMP_PROTOCOL == "3" ]; then
	echo $host | grep dtlsudp >/dev/null
	if [ "$?" -eq 0 ]; then
	    ssh $REMOTE_IPv4 "source $SNMPENV; snmpget -v $SNMP_PROTOCOL --defSecurityModel=tsm $host $oid"
	else
	    ssh $REMOTE_IPv4 "source $SNMPENV; snmpget -v $SNMP_PROTOCOL -a MD5 -A $USM_PW -l authNoPriv -u $USM_USER $host $oid"
	fi
    else
	ssh $REMOTE_IPv4 "source $SNMPENV; snmpget -v $SNMP_PROTOCOL $host $oid"
    fi
    l_status=$?
    if [ "$REMOTE_TCPDUMP" == "yes" ]; then
	sleep 4
	ssh $REMOTE_IPv4 "tcpdump -T snmp -r $TCPDUMP_REMOTE_CAP port $SNMPD_PORT or port $DTLSUDP_PORT"
    fi
    remote_get_status=$((remote_get_status + $l_status))
}

function f_remote_get()
{
    if [ "$REMOTE" == "yes" ]; then
	tcpdump_capture any 4
	if [ "$IPv4" == "yes" ]; then
	    remote_snmp_get $IPv4_EXTRA:$SNMPD_PORT
	    remote_snmp_get $IPv4_DEV0:$SNMPD_PORT
	fi
	if [ "$IPv6" == "yes" ]; then
	    remote_snmp_get udp6:[$IPv6_EXTRA]:$SNMPD_PORT
	    remote_snmp_get udp6:[$IPv6_DEV0]:$SNMPD_PORT
	fi
	if [ "$DTLSUDP4" == "yes" ]; then
	    # NOT WORKING
	    remote_snmp_get dtlsudp:$IPv4_EXTRA:$DTLSUDP_PORT
	    remote_snmp_get dtlsudp:$IPv4_DEV0:$DTLSUDP_PORT
	fi
	if [ "$DTLSUDP6" == "yes" ]; then
	    # NOT WORKING
	    remote_snmp_get dtlsudp6:[$IPv6_EXTRA]:$DTLSUDP_PORT
	    remote_snmp_get dtlsudp6:[$IPv6_DEV0%$REMOTE_IPDEV0]:$DTLSUDP_PORT
	fi
	tcpdump_read 4
    fi
}

function snmp_walk () {
    local host=$1
    local l_status=0

    $NOTE "WALK $host v$SNMP_PROTOCOL"
    if [ $SNMP_PROTOCOL == "3" ]; then
	echo $host | grep dtlsudp >/dev/null
	if [ "$?" -eq 0 ]; then
	    snmpwalk -v $SNMP_PROTOCOL --defSecurityModel=tsm $host . > $SNMPWALK_OUT
	else
	    snmpwalk -v $SNMP_PROTOCOL -a MD5 -A $USM_PW -l authNoPriv -u $USM_USER $host . > $SNMPWALK_OUT
	fi
    else
	snmpwalk -v $SNMP_PROTOCOL $host > $SNMPWALK_OUT
    fi
    l_status=$?
    if [ $l_status -eq 0 ]; then
	$HEAD $SNMPWALK_OUT
    fi

    walk_status=$((walk_status + $l_status))
}

function f_walk()
{
    if [ "$IPv4" == "yes" ]; then
	snmp_walk $IPv4_LO:$SNMPD_PORT
	snmp_walk $IPv4_EXTRA:$SNMPD_PORT
	snmp_walk $IPv4_DEV0:$SNMPD_PORT
    fi
    if [ "$IPv6" == "yes" ]; then
	snmp_walk udp6:[$IPv6_LO]:$SNMPD_PORT
	snmp_walk udp6:[$IPv6_EXTRA]:$SNMPD_PORT
	snmp_walk udp6:[$IPv6_DEV0]:$SNMPD_PORT
    fi
    if [ "$DTLSUDP4" == "yes" ]; then
	snmp_walk dtlsudp:$IPv4_LO:$DTLSUDP_PORT
	snmp_walk dtlsudp:$IPv4_EXTRA:$DTLSUDP_PORT
	snmp_walk dtlsudp:$IPv4_DEV0:$DTLSUDP_PORT
    fi
    if [ "$DTLSUDP6" == "yes" ]; then
	snmp_walk dtlsudp6:[$IPv6_LO]:$DTLSUDP_PORT
	snmp_walk dtlsudp6:[$IPv6_EXTRA]:$DTLSUDP_PORT
	snmp_walk dtlsudp6:[$IPv6_DEV0%$IPDEV0]:$DTLSUDP_PORT
    fi
}

function remote_snmp_walk () {
    local host=$1
    local l_status=0
    local oid=system.sysDescr.0

    $NOTE "REMOTE WALK $host v$SNMP_PROTOCOL $oid"
    if [ $SNMP_PROTOCOL == "3" ]; then
	echo $host | grep dtlsudp >/dev/null
	if [ "$?" -eq 0 ]; then
	    ssh $REMOTE_IPv4 "source $SNMPENV; snmpwalk -v $SNMP_PROTOCOL --defSecurityModel=tsm $host . > $SNMPWALK_OUT"
	else
	    ssh $REMOTE_IPv4 "source $SNMPENV; snmpwalk -v $SNMP_PROTOCOL -a MD5 -A $USM_PW -l authNoPriv -u $USM_USER $host . > $SNMPWALK_OUT"
	fi
    else
	ssh $REMOTE_IPv4 "source $SNMPENV; snmpwalk -v $SNMP_PROTOCOL $host > $SNMPWALK_OUT"
    fi
    l_status=$?
    if [ $l_status -eq 0 ]; then
	ssh $REMOTE_IPv4 $HEAD $SNMPWALK_OUT
    fi

    remote_walk_status=$((remote_walk_status + $l_status))
}

function f_remote_walk()
{
    if [ "$REMOTE" == "yes" ]; then
	if [ "$IPv4" == "yes" ]; then
	    remote_snmp_walk $IPv4_EXTRA:$SNMPD_PORT
	    remote_snmp_walk $IPv4_DEV0:$SNMPD_PORT
	fi
	if [ "$IPv6" == "yes" ]; then
	    remote_snmp_walk udp6:[$IPv6_EXTRA]:$SNMPD_PORT
	    remote_snmp_walk udp6:[$IPv6_DEV0]:$SNMPD_PORT
	fi
	if [ "$DTLSUDP4" == "yes" ]; then
	    # NOT WORKING
	    remote_snmp_walk dtlsudp:$IPv4_EXTRA:$DTLSUDP_PORT
	    remote_snmp_walk dtlsudp:$IPv4_DEV0:$DTLSUDP_PORT
	fi
	if [ "$DTLSUDP6" == "yes" ]; then
	    # NOT WORKING
	    remote_snmp_walk dtlsudp6:[$IPv6_EXTRA]:$DTLSUDP_PORT
	    remote_snmp_walk dtlsudp6:[$IPv6_DEV0%$REMOTE_IPDEV0]:$DTLSUDP_PORT
	fi
    fi
}

function snmp_inform () {
    local host=$1
#    local inform_debug="-Lf $SNMPINFORM_LOG -Dtrap,usm -d"
#    local inform_debug="-Lf $SNMPINFORM_LOG -DALL -d"

    $NOTE "INFORM $host v$SNMP_PROTOCOL"
    bash $SETX -c "snmpinform $inform_debug -e $USM_EID -v $SNMP_PROTOCOL -a MD5 -A $USM_PW -x AES -X $USM_PW -l authPriv -u $USM_USER $host \"\" $TRAP_OID $OID i 444"
}

function snmp_trap () {
    local host=$1
#    local trap_debug="-Lf $SNMPTRAP_LOG -Dtrap,usm -d"
#    local trap_debug="-Lf $SNMPTRAP_LOG -DALL -d"

    $NOTE "TRAP $host v$SNMP_PROTOCOL"
    if [ $SNMP_PROTOCOL == "1" ]; then
	snmptrap $trap_debug -v $SNMP_PROTOCOL $host $TRAP_OID ""  6 17 ""  $OID i 111
    elif [ $SNMP_PROTOCOL == "2c" ]; then
	snmptrap $trap_debug -v $SNMP_PROTOCOL $host "" $TRAP_OID $OID i 222
    elif [ $SNMP_PROTOCOL == "3" ]; then
	bash $SETX -c "snmptrap $trap_debug -e $USM_EID -v $SNMP_PROTOCOL -a MD5 -A $USM_PW -x AES -X $USM_PW -l authPriv -u $USM_USER $host \"\" $TRAP_OID $OID i 333"
    fi
}

function snmp_trap_check () {
    local l_status

    if [ ! -e $SNMPTRAPD_LOG.prev ]; then
	grep $OID $SNMPTRAPD_LOG
    else
	diff --changed-group-format='%<%>' --unchanged-group-format='' $SNMPTRAPD_LOG $SNMPTRAPD_LOG.prev | grep $OID
    fi
    trap_status=$((trap_status + $?))
    cp $SNMPTRAPD_LOG $SNMPTRAPD_LOG.prev
}

function snmp_trap_remote_check () {
    local l_status

    scp -q $REMOTE_IPv4:$SNMPTRAPD_LOG $SNMPTRAPD_LOG.remote
    if [ ! -e $SNMPTRAPD_LOG.remote.prev ]; then
	grep $OID $SNMPTRAPD_LOG.remote
    else
	diff --changed-group-format='%<%>' --unchanged-group-format='' $SNMPTRAPD_LOG.remote $SNMPTRAPD_LOG.remote.prev | grep $OID
    fi
    remote_trap_status=$((remote_trap_status + $?))
    cp $SNMPTRAPD_LOG.remote $SNMPTRAPD_LOG.remote.prev
}

function snmp_trap_ip ()
{
    local host=$1

    snmp_trap $host
    snmp_trap_check

    if [ $SNMP_PROTOCOL == "3" ]; then
	snmp_inform $host
	snmp_trap_check
    fi
}

function snmp_trap_dtlsudp ()
{
    local host=$1
#    local trap_debug="-Lf $SNMPTRAP_LOG -Dtrap,tsm,tls,dtlsudp,9:dtlsudp,9:dtlsudp:* -d"
#    local inform_debug="-Lf $SNMPINFORM_LOG -Dtrap,tsm,tls,dtlsudp,9:dtlsudp,9:dtlsudp:* -d"
#    local trap_debug="-Lf $SNMPTRAP_LOG -DALL -d"
#    local inform_debug="-Lf $SNMPINFORM_LOG -DALL -d"

    # NOT WORKING
    $NOTE "TRAP $host v3"
    bash $SETX -c "snmptrap  $trap_debug -l authPriv -r 1 -v 3 -T localCert=$appCert -T peerCert=$serverCert $host \"\" $TRAP_OID $OID i 555"
    snmp_trap_check

    $NOTE "INFORM $host v3"
    bash $SETX -c "snmpinform $inform_debug -l authPriv -r 1 -v 3 $host \"\" $TRAP_OID $OID i 666"
    snmp_trap_check
}

function f_trap()
{
    if [ "$IPv4" == "yes" ]; then
	snmp_trap_ip udp:$IPv4_LO:$SNMPTRAPD_PORT
	snmp_trap_ip udp:$IPv4_EXTRA:$SNMPTRAPD_PORT
	snmp_trap_ip udp:$IPv4_DEV0:$SNMPTRAPD_PORT
    fi
    if [ "$IPv6" == "yes" ]; then
	snmp_trap_ip udp6:[$IPv6_LO]:$SNMPTRAPD_PORT
	snmp_trap_ip udp6:[$IPv6_EXTRA]:$SNMPTRAPD_PORT
	snmp_trap_ip udp6:[$IPv6_DEV0]:$SNMPTRAPD_PORT
    fi
    if [ "$DTLSUDP4" == "yes" ]; then
#	snmp_trap_dtlsudp dtlsudp:$IPv4_LO:$SNMPTRAPD_DTLSUDP_PORT
#	snmp_trap_dtlsudp dtlsudp:$IPv4_EXTRA:$SNMPTRAPD_DTLSUDP_PORT
	snmp_trap_dtlsudp dtlsudp:$IPv4_DEV0:$SNMPTRAPD_DTLSUDP_PORT
    fi
    if [ "$DTLSUDP6" == "yes" ]; then
	snmp_trap_dtlsudp dtlsudp6:[$IPv6_LO]:$SNMPTRAPD_DTLSUDP_PORT
	snmp_trap_dtlsudp dtlsudp6:[$IPv6_EXTRA]:$SNMPTRAPD_DTLSUDP_PORT
	snmp_trap_dtlsudp dtlsudp6:[$IPv6_DEV0%$IPDEV0]:$SNMPTRAPD_DTLSUDP_PORT
    fi
}

function snmp_trap_remote_ip ()
{
    local host=$1

    snmp_trap $host
    snmp_trap_remote_check

    if [ $SNMP_PROTOCOL == "3" ]; then
	snmp_inform $host
	snmp_trap_remote_check
    fi
}

function snmp_trap_remote_dtlsudp ()
{
    local host=$1
#    local trap_debug="-Lf $SNMPTRAP_LOG.remote -Dtrap,tsm,tls,dtlsudp,9:dtlsudp,9:dtlsudp:* -d"
#    local inform_debug="-Lf $SNMPINFORM_LOG.remote -Dtrap,tsm,tls,dtlsudp,9:dtlsudp,9:dtlsudp:* -d"
#    local trap_debug="-Lf $SNMPTRAP_LOG.remote -DALL -d"
#    local inform_debug="-Lf $SNMPINFORM_LOG.remote -DALL -d"

    # NOT WORKING
    $NOTE "REMOTE TRAP $host v3"
    bash $SETX -c "snmptrap $trap_debug -l authPriv -r 1 -v 3 $host \"\" $TRAP_OID $OID i 555"
    snmp_trap_remote_check

    $NOTE "REMOTE INFORM $host v3"
    # NOT WORKING
    bash $SETX -c "snmpinform $inform_debug -l authPriv -r 1 -v 3 $host \"\" $TRAP_OID $OID i 666"
    snmp_trap_remote_check
}

function f_remote_trap()
{
    if [ "$REMOTE" == "yes" ]; then
	tcpdump_capture any 4
	if [ "$IPv4" == "yes" ]; then
	    snmp_trap_remote_ip $REMOTE_IPv4:$SNMPTRAPD_PORT
	fi
	if [ "$IPv6" == "yes" ]; then
	    snmp_trap_remote_ip udp6:[$REMOTE_IPv6]:$SNMPTRAPD_PORT
	fi
	if [ "$DTLSUDP4" == "yes" ]; then
	    snmp_trap_remote_dtlsudp dtlsudp:$REMOTE_IPv4:$SNMPTRAPD_DTLSUDP_PORT
	fi
	if [ "$DTLSUDP6" == "yes" ]; then
	    snmp_trap_remote_dtlsudp dtlsudp6:[$REMOTE_IPv6]:$SNMPTRAPD_DTLSUDP_PORT
	fi
	tcpdump_read 4
    fi
}


function usage()
{
    echo -e "\n$(basename $0) -h -c -C \n"
    echo -e " -c   clean: stop snmp servers and remove tmp directory before running the test"
    echo -e " -C   cleanall: including generated certificates"
    echo -e ""
    echo -e " use ENV variables to configure test"
    echo -e "   GET=$GET"
    echo -e "   WALK=$WALK"
    echo -e "   TRAP=$TRAP"
    echo -e "   IPv4=$IPv4"
    echo -e "   IPv6=$IPv6"
    echo -e "   DTLSUDP4=$DTLSUDP4"
    echo -e "   DTLSUDP6=$DTLSUDP6"
    echo -e "   TCPDUMP=$TCPDUMP"
    echo -e "   REMOTE=$REMOTE"
    echo -e "   REMOTE_TCPDUMP=$REMOTE_TCPDUMP"
    echo -e "   TRACE=$TRACE"
    echo -e "   SHOWLOGS=$SHOWLOGS"
    echo -e "   DEBUG=$DEBUG"
    echo -e "   SNMP_PROTOCOL=$SNMP_PROTOCOL"
}

###########################################
# main

while getopts "cCh" opt; do
    case $opt in
	c)
	    snmp_kill
	    rm -rf $TESTDIR
	    ;;
	C)
	    snmp_kill
	    rm -rf $TESTDIR $CERTDIR
	    ;;
	h)
	    usage
	    exit 0
	    ;;
	*)
	    usage
	    exit 0
	    ;;

    esac
done
shift $((OPTIND-1))

if [ $SNMP_PROTOCOL != "3" ]; then
    if [ "$DTLSUDP4" == "yes" ] || [ "$DTLSUDP6" == "yes" ]; then
	echo "Protocol=$SNMP_PROTOCOL is not supported with DTLSUDP"
	exit 1
    fi
fi

$NOTE $(date)

snmp_kill
prepare
snmp_start

if [ "$GET" == "yes" ]; then
    f_get
    f_remote_get
fi

if [ "$WALK" == "yes" ]; then
    f_walk
    f_remote_walk
fi

if [ "$TRAP" == "yes" ]; then
    f_trap
    f_remote_trap
fi

snmp_check_servers

echo -e "\n Result:"
echo "  GET_STATUS:  $get_status"
echo "  TRAP_STATUS: $trap_status"
echo "  WALK_STATUS: $walk_status"
status=$((get_status + $trap_status + $walk_status))

if [ "$REMOTE" == "yes" ]; then
    echo "  REMOTE_GET_STATUS: $remote_get_status"
    echo "  REMOTE_TRAP_STATUS: $remote_trap_status"
    echo "  REMOTE_WALK_STATUS: $remote_walk_status"
    status=$((status + $remote_get_status + $remote_trap_status + $remote_walk_status))
fi
exit $status
