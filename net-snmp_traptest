#!/bin/bash

[ -z "$IPv4" ] && IPv4=no
[ -z "$IPv6" ] && IPv6=no
[ -z "$DTLSUDP4" ] && DTLSUDP4=yes
[ -z "$DTLSUDP6" ] && DTLSUDP6=no
[ -z "$TCPDUMP" ] && TCPDUMP=no
[ -z "$SNMP_PROTOCOL" ] && SNMP_PROTOCOL=3
[ -z "$SETX" ] && SETX=""
[ -z "$INFORM" ] && INFORM=no
[ $INFORM = "yes" ] && inform="-Ci"
[ -z "$SETUP_TRAPSESS" ] && SETUP_TRAPSESS=yes
[ -z "$SETUP_DYNTRAP" ] && SETUP_DYNTRAP=yes
[ -z "$SEND_TRAPS" ] && SEND_TRAPS=yes
[ -z "$DEBUG" ] && DEBUG=no
[ -z "$DYNDEBUG" ] && DYNDEBUG=no
[ -z "$TLS_TYPE" ] && TLS_TYPE=peer
[ -z "$MD" ] && MD=sha1
[ -z "$CERT_PREFIX" ] && CERT_PREFIX=

[ -z "$IPDEV0" ] && IPDEV0=eth0

[ -z "$REMOTE_IPDEV0" ] && REMOTE_IPDEV0=eth0
[ -z "$REMOTE_IPv4" ] && REMOTE_IPv4=128.224.95.149
[ -z "$REMOTE_IPv6" ] && REMOTE_IPv6=2001:1b70:82a8:90:1284:31:0:149

: ${TRACE:='echo -e --- '}
#: ${TRACE:=': '}

#####################################################################
BASEDIR=$(dirname "$(realpath $0)")
TESTDIR=/tmp/snmp/test
SNMPD_CERTDIR=/tmp/snmp/cert_snmpd
SNMPTRAPD_CERTDIR=/tmp/snmp/cert_snmptrapd

SNMPD_LOG=$TESTDIR/snmpd.log
SNMPD_PID=$TESTDIR/snmpd.pid
SNMPD_CONF_IN=$BASEDIR/snmpd.conf
SNMPD_CONF=$TESTDIR/snmpd.conf
SNMPD_PORT=161

SNMPTRAPD_LOG=$TESTDIR/snmptrapd.log
SNMPTRAPD_PID=$TESTDIR/snmptrapd.pid
SNMPTRAPD_CONF_IN=$BASEDIR/snmptrapd.conf
SNMPTRAPD_CONF=$TESTDIR/snmptrapd.conf
SNMPTRAPD_PORT=162
SNMPTRAPD_DTLSUDP_PORT=10162

SNMP_CONF_IN=$BASEDIR/snmp.conf
SNMP_CONF=$TESTDIR/snmp.conf

SNMP_COMMUNITY=public
SNMPSET_LOG=$TESTDIR/snmpset.log
SNMPWALK_OUT=$TESTDIR/snmpwalk.out
SNMPTRAP_LOG=$TESTDIR/snmptrap.log

DTLSUDP_PORT=10161

LOGTIMESTAMP="logTimestamp 0"

NET_SNMP_CERT=net-snmp-cert

APP_USER=appuser
TSM_USER=tsmuser
EPRIME_CA=ca.eprime.com
EPRIME_EMAIL=admin@eprime.com

DYNTRAP_USER=dyntrapuser
DYNTRAP_PW=dyntrap1234
DYNTRAP_EID=0x80001f8880523983647b8b0355

TRAP_USER=trapuser
TRAP_PW=trap1234
TRAP_EID=0x80001f8880523983647b8b0356

USM_CMD_USER=usm_cmduser
USM_CMD_PW=usm_cmdpw
USM_CMD_EID=0x80001f8880523983647b8b0357
PRIVPROTO=DES

RETRYCOUNT=0
TIMEOUT=3

IPv4_HOST=0.0.0.0
IPv4_LO=127.0.0.1
IPv4_DEV0=$(ip -o -4 addr list $IPDEV0 | head -1 | awk '{print $4}' | cut -d/ -f1)
IPv4_DEV0_LAST=$(echo $IPv4_DEV0 | cut -d'.' -f4)

IPv6_HOST=::
IPv6_LO=0:0:0:0:0:0:0:1

HOSTNAME=$(hostname)
#HOSTNAME=$IPv4_DEV0

TCPDUMP_TIMEOUT=3

NOTE='echo -e --- '
BASH="bash $SETX -c"
SSH_REMOTE="ssh $REMOTE_IPv4"

CONFIG_HOST=$IPv4_HOST:$SNMPD_PORT
#CONFIG_HOST=udp6:[$IPv6_HOST]:$SNMPD_PORT
#CONFIG_HOST=dtlsudp:$IPv4_LO:$DTLSUDP_PORT
#CONFIG_HOST=dtlsudp6:[$IPv6_LO]:$DTLSUDP_PORT

source $BASEDIR/snmp_debug.sh

echoerr() { echo "$@" 1>&2; }

#####################################################################
snmp_kill () {
    $TRACE "Kill all running snmp servers"

    killall -w snmpd &> /dev/null
    killall -w snmptrapd &> /dev/null

    rm -f $SNMPTRAPD_LOG* $SNMPTRAPD_PID
    rm -f $SNMPD_LOG $SNMPD_PID
}

prepare () {
    [ ! -e $TESTDIR ] && mkdir -p $TESTDIR

    prepare_config
}

PREPARE_REMOTE=$TESTDIR/prepare_remote
prepare_remote () {
    if [ "$DEBUG" = "yes" ]; then
	local snmptrapd_debug="-Dtrap,usm,tsm,dtlsudp,tsm,9:dtlsudp,9:dtlsudp:* -d"
    fi

    if [ "$REMOTE" = "yes" ]; then
	if [ ! -e $PREPARE_REMOTE ]; then
	    $TRACE "preparing remote IP"
	    $SSH_REMOTE "killall -w snmptrapd &> /dev/null"
	    $SSH_REMOTE "ifconfig $REMOTE_IPDEV0 inet6 add $REMOTE_IPv6/64  &> /dev/null"
	    $SSH_REMOTE "ip -6 route add default dev $REMOTE_IPDEV0 &> /dev/null"
	    $SSH_REMOTE "rm -rf $TESTDIR $SNMPTRAPD_CERTDIR"
	    $SSH_REMOTE "mkdir -p $TESTDIR $SNMPTRAPD_CERTDIR"
	    rsync -az $TESTDIR/ $REMOTE_IPv4:$TESTDIR
	    rsync -az $SNMPTRAPD_CERTDIR/ $REMOTE_IPv4:$SNMPTRAPD_CERTDIR
	    $SSH_REMOTE "sed -i 's/^clientaddr/#clientaddr/' $SNMP_CONF"
	    touch $PREPARE_REMOTE
	fi
	local snmptrapd_servers=()
	snmptrapd_servers+=("udp:$SNMPTRAPD_PORT")
	snmptrapd_servers+=("udp6:$SNMPTRAPD_PORT")
	snmptrapd_servers+=("dtlsudp:$IPv4_HOST:$SNMPTRAPD_DTLSUDP_PORT")
	snmptrapd_servers+=("dtlsudp6:[$IPv6_HOST]:$SNMPTRAPD_DTLSUDP_PORT")

	$TRACE "starting remote snmptrapd"
	$SSH_REMOTE "killall -w snmptrapd &> /dev/null"
	$SSH_REMOTE "rm -f SNMPTRAPD_LOG SNMPTRAPD_PID"
	echo "REMOTE: snmptrapd $snmptrapd_debug -C -c $SNMPTRAPD_CONF -Lf $SNMPTRAPD_LOG -p $SNMPTRAPD_PID ${snmptrapd_servers[*]}"
	$SSH_REMOTE "SNMPCONFPATH=$TESTDIR:$SNMPTRAPD_CERTDIR snmptrapd $snmptrapd_debug -C -c $SNMPTRAPD_CONF -Lf $SNMPTRAPD_LOG -p $SNMPTRAPD_PID ${snmptrapd_servers[*]}"
    fi
}

PREPARE_IP=$TESTDIR/prepare_ip
prepare_ip () {
    $TRACE $FUNCNAME
    IPv6_DEV0=$(ip -o -6 addr list $IPDEV0 | grep global | head -1 | awk '{print $4}' | cut -d/ -f1)
    if [ -z $IPv6_DEV0 ]; then
	# set global IPv6
	IPv6_DEV0=2001:1b70:82a8:90:1284:31:0:${IPv4_DEV0_LAST}
	ifconfig $IPDEV0 inet6 add $IPv6_DEV0/80
    fi
}

prepare_config ()
{
    $TRACE $FUNCNAME

    create_cert
    get_cert
    create_snmp_conf $SNMP_CONF_IN $SNMP_CONF
    create_snmpd_conf $SNMPD_CONF_IN $SNMPD_CONF $CONFIG_IPv4 $CONFIG_IPv6
    create_snmptrapd_conf $SNMPTRAPD_CONF_IN $SNMPTRAPD_CONF
    export_env
}

create_cert ()
{
    local ca_config="--org EPRIME --unit RCS --country SE --province DALARNA --locality FALUN --email $EPRIME_EMAIL --san DNS:$HOSTNAME"
    local cert_config="$ca_config --with-ca $EPRIME_CA"

    $TRACE $FUNCNAME
    if [ ! -d $SNMPD_CERTDIR ]; then
	$BASH "echo Using MD=$MD"
	$BASH "$NET_SNMP_CERT genca -I -n $EPRIME_CA $ca_config -C $SNMPD_CERTDIR"

	$BASH "$NET_SNMP_CERT gencert -I -t ${CERT_PREFIX}snmpd     --cn $TSM_USER  $cert_config -C $SNMPD_CERTDIR"
	$BASH "$NET_SNMP_CERT gencert -I -t ${CERT_PREFIX}snmptrapd --cn $TRAP_USER $cert_config -C $SNMPD_CERTDIR"
	$BASH "$NET_SNMP_CERT gencert -I -t ${CERT_PREFIX}snmp      --cn $APP_USER  $cert_config -C $SNMPD_CERTDIR"
	cp -a $SNMPD_CERTDIR $SNMPTRAPD_CERTDIR
	if [ "$TLS_TYPE" = "trust" ]; then
	    rm -f $SNMPD_CERTDIR/tls/certs/${CERT_PREFIX}snmptrapd.crt
	    rm -f $SNMPD_CERTDIR/tls/private/${CERT_PREFIX}snmptrapd.key
	fi
    fi
}

get_cert ()
{
    # Always use sha1 as MD in net-snmp, even if the cert is created with another signature MD
    local md=sha1

    $TRACE $FUNCNAME

    caCert=$(openssl    x509 -noout -in $SNMPD_CERTDIR/tls/ca-certs/$EPRIME_CA.crt           -fingerprint -$md | cut -d= -f2)
    snmpdCert=$(openssl x509 -noout -in $SNMPD_CERTDIR/tls/certs/${CERT_PREFIX}snmpd.crt     -fingerprint -$md | cut -d= -f2)
    appCert=$(openssl   x509 -noout -in $SNMPD_CERTDIR/tls/certs/${CERT_PREFIX}snmp.crt      -fingerprint -$md | cut -d= -f2)
    trapdCert=$(openssl x509 -noout -in $SNMPTRAPD_CERTDIR/tls/certs/${CERT_PREFIX}snmptrapd.crt -fingerprint -$md | cut -d= -f2)

    [ "$TRACE" != ": " ] && show_cert
}

show_cert ()
{
    $TRACE $FUNCNAME

    local SignAlg=$(openssl x509 -noout -in $SNMPD_CERTDIR/tls/ca-certs/$EPRIME_CA.crt -text | grep -m 1 Signature | cut -d: -f2 )

    $NOTE "SIGN_ALGORITHM: $SignAlg"
    $NOTE "CA_CERT:    $caCert"
    $NOTE "SNMPD_CERT: $snmpdCert"
    $NOTE "APP_CERT:   $appCert"
    $NOTE "TRAPD_CERT: $trapdCert"
}

create_snmpd_conf ()
{
    local conf_in=$1
    local conf=$2
    local host_ipv4=$3
    local host_ipv6=$4

    if [ "$SETUP_TRAPSESS" = "yes" ]; then
	local TRAPSESS="trapsess $inform -v 3 -r $RETRYCOUNT -t $TIMEOUT"
    else
	local TRAPSESS="## trapsess $inform -v 3 -r $RETRYCOUNT -t $TIMEOUT"
    fi
    if [ $INFORM = "yes" ]; then
	TRAPSESS_USM="$TRAPSESS -a MD5 -A $TRAP_PW -x $PRIVPROTO -X $TRAP_PW -l authNoPriv -u $TRAP_USER"
    else
	TRAPSESS_USM="$TRAPSESS -e $TRAP_EID -a MD5 -A $TRAP_PW -x $PRIVPROTO -X $TRAP_PW -l authNoPriv -u $TRAP_USER"
    fi
    local TRAPSESS_TSM=$TRAPSESS

    $TRACE $FUNCNAME

    cp $conf_in $conf

    echo "oldEngineID $DYNTRAP_EID" >> $conf
    echo "[snmp] persistentdir $TESTDIR/snmpd_persist" >> $conf
    echo "createUser $USM_CMD_USER MD5 \"$USM_CMD_PW\" $PRIVPROTO \"$USM_CMD_PW\"" >> $conf
    #echo "createUser $TRAP_USER MD5 \"$TRAP_PW\" $PRIVPROTO \"$TRAP_PW\"" >> $conf
    echo "createUser $DYNTRAP_USER MD5 \"$DYNTRAP_PW\" $PRIVPROTO \"$DYNTRAP_PW\"" >> $conf
    echo "rwuser $USM_CMD_USER" >> $conf
    echo "certSecName 10 $appCert --cn" >> $conf
    echo "rwuser -s tsm $APP_USER authpriv" >> $conf
    echo "trapcommunity public" >> $conf
    echo -e "[snmp] $LOGTIMESTAMP\n" >> $conf

    if [ $SNMP_PROTOCOL = "2c" ]; then
	[ "$IPv4" = "yes" ] && echo "trap2sink udp:$host_ipv4:$SNMPTRAPD_PORT" >> $conf
	[ "$IPv6" = "yes" ] && echo "trap2sink udp6:[$host_ipv6]:$SNMPTRAPD_PORT" >> $conf
    else # $SNMP_PROTOCOL = "3"
	[ "$IPv4" = "yes" ] && echo "$TRAPSESS_USM udp:$host_ipv4:$SNMPTRAPD_PORT" >> $conf
	[ "$IPv6" = "yes" ] && echo "$TRAPSESS_USM udp6:[$host_ipv6]:$SNMPTRAPD_PORT" >> $conf

	if [ "$DTLSUDP4" = "yes" ] || [ "$DTLSUDP6" = "yes" ]; then
	    if [ "$TLS_TYPE" = "peer" ]; then
		$TRACE "peer"
		local tls_options="-T peerCert=$trapdCert"
		echo -e "\n[snmp] peerCert $trapdCert" >> $conf
	    else
		$TRACE "trust"
		local tls_options="-T trust_cert=$caCert -T their_hostname=$HOSTNAME"
		#local tls_options="-T trust_cert=$caCert -T their_hostname=*.eprime.com"
		#local tls_options="-T trust_cert=$caCert -T their_hostname=kalle.eprime.com"
		#local tls_options="-T trust_cert=$caCert -T their_hostname="
		echo "[snmp] trustCert $caCert" >> $conf
	    fi
	    echo "[snmp] localCert $snmpdCert" >> $conf
	    echo "rwuser -s tsm $TSM_USER authpriv" >> $conf

	    [ "$DTLSUDP4" = "yes" ] && echo "$TRAPSESS_TSM $tls_options dtlsudp:$host_ipv4:$SNMPTRAPD_DTLSUDP_PORT" >> $conf
	    [ "$DTLSUDP6" = "yes" ] && echo "$TRAPSESS_TSM $tls_options dtlsudp6:[$host_ipv6]:$SNMPTRAPD_DTLSUDP_PORT" >> $conf
	fi
    fi
}

create_snmptrapd_conf ()
{
    local conf_in=$1
    local conf=$2

    $TRACE $FUNCNAME

    cp $conf_in $conf
    echo -e "\n# USM" >> $conf
    #    echo "oldEngineID $TRAP_EID" >> $conf
    echo "[snmp] persistentdir $TESTDIR/snmptrapd_persist" >> $conf

    if [ $INFORM = "yes" ]; then
	echo createUser $TRAP_USER MD5 \"$TRAP_PW\" $PRIVPROTO \"$TRAP_PW\" >> $conf
	echo createUser $DYNTRAP_USER MD5 \"$DYNTRAP_PW\" $PRIVPROTO \"$DYNTRAP_PW\" >> $conf
	echo createUser $USM_CMD_USER MD5 \"$USM_CMD_PW\" $PRIVPROTO \"$USM_CMD_PW\" >> $conf
    else
	echo createUser -e $TRAP_EID $TRAP_USER MD5 \"$TRAP_PW\" $PRIVPROTO \"$TRAP_PW\" >> $conf
	echo createUser -e $DYNTRAP_EID $DYNTRAP_USER MD5 \"$DYNTRAP_PW\" $PRIVPROTO \"$DYNTRAP_PW\" >> $conf
	echo createUser -e $USM_CMD_EID $USM_CMD_USER MD5 \"$USM_CMD_PW\" $PRIVPROTO \"$USM_CMD_PW\" >> $conf
    fi
    echo "authUser log $TRAP_USER" >> $conf
    echo "authUser log $DYNTRAP_USER" >> $conf
    echo "authUser log $USM_CMD_USER" >> $conf

    if [ "$DTLSUDP4" = "yes" ] || [ "$DTLSUDP6" = "yes" ]; then
	echo -e "\n# TSM" >> $conf
	echo "certSecName 10 $snmpdCert --cn" >> $conf
	echo "certSecName 11 $appCert --cn" >> $conf
	echo "[snmp] localCert $trapdCert" >> $conf
	echo "authuser log -s tsm $TSM_USER authpriv" >> $conf
	echo "authuser log -s tsm $APP_USER authpriv" >> $conf
    fi
    echo [snmp] $LOGTIMESTAMP >> $conf
}

create_snmp_conf ()
{
    local conf_in=$1
    local conf=$2

    $TRACE $FUNCNAME

    cp $conf_in $conf
    {
	echo "defCommunity $SNMP_COMMUNITY"
	echo "localCert $appCert"
	echo $LOGTIMESTAMP
    } > $conf
}

SNMP_ENV=$TESTDIR/snmpenv
export_env ()
{
    $TRACE $FUNCNAME
    {
	echo "export SNMPCONFPATH=$TESTDIR:$SNMPD_CERTDIR"
	echo "export MD=$MD"
    } > $SNMP_ENV
    
    source $SNMP_ENV
}

set_servers()
{
    SNMPD_SERVERS=()
    SNMPTRAPD_SERVERS=()
    SNMPD_SERVERS+=("udp:$IPv4_HOST:$SNMPD_PORT")
    SNMPTRAPD_SERVERS+=("udp:$SNMPTRAPD_PORT")
    SNMPD_SERVERS+=("udp6:[$IPv6_HOST]:$SNMPD_PORT")
    SNMPTRAPD_SERVERS+=("udp6:$SNMPTRAPD_PORT")
    SNMPD_SERVERS+=("dtlsudp:$IPv4_HOST:$DTLSUDP_PORT")
    SNMPTRAPD_SERVERS+=("dtlsudp:$IPv4_HOST:$SNMPTRAPD_DTLSUDP_PORT")
    SNMPD_SERVERS+=("dtlsudp6:[$IPv6_HOST]:$DTLSUDP_PORT")
    SNMPTRAPD_SERVERS+=("dtlsudp6:[$IPv6_HOST]:$SNMPTRAPD_DTLSUDP_PORT")
}

snmp_start () {
    if [ "$DEBUG" = "yes" ]; then
	local snmptrapd_debug="-DAW,trap,usm,tsm,dtlsudp,tsm,9:dtlsudp,9:dtlsudp:*,sess_process_packet,snmptrapd,9:openssl:fingerprint,cert:find:params,tls,tlsbase,tls:*,tls_x509:* -d"
	local snmptrapd_debug="-DALL -d"

	local snmpd_debug="-d -Dtrap,trap:*,usm,tsm,tls,openssl,cert,dtlsudp,9:dtlsudp,9:dtlsudp:*,9:openssl,9:openssl:fingerprint,9:tlstmParams,9dtlsudp,snmptls,snmp_openssl,snmpNotifyTable,snmpTargetAddrEntry,snmpTargetParamsEntry,udpbase,netsnmp,send_notifications,snmp_build,snmpv3_build,netsnmp_udp6,AW,snmp_sess_add,target_sessions,netsnmp_udpbase,snmpv3,netsnmp_sockaddr_in,netsnmp_sockaddr_in6_2,snmp_api,9:cert,sslctx_client,tls_x509:verif,tlstmCertToTSNTable:save,read_config,cert:find:params,cert:index:dir,9:cert:file:add,9:cert:read,read_config:store,tlstmCertToTSNTable:save,tlstmCertToTSNTable,ssl:cert:chain"
	#local snmpd_debug="-DALL -d"
    fi
    $TRACE $FUNCNAME
    echo '/tmp/core.%e.%p' > /proc/sys/kernel/core_pattern
    ulimit -c unlimited

    $NOTE "snmptrapd -C -c $SNMPTRAPD_CONF -Lf $SNMPTRAPD_LOG -p $SNMPTRAPD_PID $snmptrapd_debug ${SNMPTRAPD_SERVERS[*]}"
    SNMPCONFPATH=$TESTDIR:$SNMPTRAPD_CERTDIR snmptrapd -C -c $SNMPTRAPD_CONF -Lf $SNMPTRAPD_LOG -p $SNMPTRAPD_PID $snmptrapd_debug ${SNMPTRAPD_SERVERS[*]}
    $NOTE "snmpd -V -a -C -c $SNMPD_CONF -Lf $SNMPD_LOG -p $SNMPD_PID $snmpd_debug ${SNMPD_SERVERS[*]}"
    snmpd -C -c $SNMPD_CONF -Lf $SNMPD_LOG -p $SNMPD_PID $snmpd_debug ${SNMPD_SERVERS[*]}
    sleep 3
}

TCPDUMP_CAP=$TESTDIR/tcpdump.pcap
tcpdump_capture ()
{
    local interface=$1
    local rotate_seconds=$2
    local filecount=1
    if [ "$TCPDUMP" = "yes" ]; then
	tcpdump -G $rotate_seconds -W $filecount -w $TCPDUMP_CAP -i $interface &>/dev/null &
	sleep 1
    fi
}

tcpdump_read ()
{
    # workaround: need a last package to close the tcpdump capture
    ping6 -c 1 $IPv6_LO >/dev/null
    tcpdump -T snmp -r $TCPDUMP_CAP \
	    port $SNMPTRAPD_PORT or \
	    port $SNMPTRAPD_DTLSUDP_PORT 2> /dev/null
}

get_ipv ()
{
    echo $1 | grep : >/dev/null
    if [ $? = 0 ]; then
	# IPv6
	printf "6"
    else
	# IPv4
	printf "4"
    fi
}

get_proto ()
{
    if [ $1 = $SNMPTRAPD_PORT ]; then
	printf "udp"
    else
	printf "dtlsudp"
    fi
}

convert_ip2hex ()
{
    local host=$1
    local port=$2

    printf "0x"
    if [ "$(get_ipv $host)" = "6" ]; then
	echo $host | grep :: >/dev/null
	if [ $? = 0 ]; then
	    no_of_colons=$(echo $host | tr -d -c ':' | awk '{ print length; }')
	    case $no_of_colons in
		7)
		    host=$(echo $host | sed 's/::/:0:/')
		    ;;
		6)
		    host=$(echo $host | sed 's/::/:0:0:/')
		    ;;
		5)
		    host=$(echo $host | sed 's/::/:0:0:0:/')
		    ;;
		4)
		    host=$(echo $host | sed 's/::/:0:0:0:0:/')
		    ;;
		3)
		    host=$(echo $host | sed 's/::/:0:0:0:0:0:/')
		    ;;
		2)
		    echo $host | grep "^::" > /dev/null
		    if [ $? = 0 ]; then
			host=$(echo $host | sed 's/::/0:0:0:0:0:0:0:/')
		    else
			host=$(echo $host | sed 's/::/:0:0:0:0:0:0:/')
		    fi
		    ;;
	    esac
	fi
	for i in $(echo $host | tr ':' ' '); do
	    printf "%04x" $(echo $((16#$i)))
	done
    else
	for i in $(echo $host | tr '.' ' '); do
	    printf "%02x" $i
	done
    fi
    printf "%04x\n" $port
}

configure_mib()
{
    local host=$1
    local targetaddr=$(convert_ip2hex $2 $3)
    local ipv=$(get_ipv $2)
    local proto=$(get_proto $3)${ipv}
    local obj="'mytrap_${proto}'"
    local link=mytrap_${proto}
    #local link=internal0
    #local snmpset_debug="-Dsnmp -d"

    echo -e "\n--- HOST: $host TRAPADDR: $2:$3 ($targetaddr) OBJ=$obj"

    #snmpusm -v 3 -u $USM_CMD_USER  -n "" -l authNoPriv -a MD5 -A $USM_CMD_PW $host create $DYNTRAP_USER $USM_CMD_USER
    #snmpusm -v 3 -x $PRIVPROTO -u $DYNTRAP_USER -n "" -l authNoPriv -a MD5 -A $USM_CMD_PW $host passwd $USM_CMD_PW $DYNTRAP_PW
    #snmpget -v 3 -u $TRAP_USER -n "" -l authNoPriv -a MD5 -A $TRAP_PW $host sysUpTime.0

    echo $host | grep dtlsudp >/dev/null
    if [ "$?" -eq 0 ]; then
	# TSM
	local SNMPSET="snmpset -v 3 -T peerCert=$snmpdCert $host"
    else
	# USM
	local SNMPSET="snmpset $snmpset_debug -v 3 -r 0 -a MD5 -A $USM_CMD_PW -l authNoPriv -u $USM_CMD_USER $host"
    fi

    # snmpTargetParams
    $SNMPSET SNMP-TARGET-MIB::snmpTargetParamsRowStatus.$obj = 5
    $SNMPSET SNMP-TARGET-MIB::snmpTargetParamsStorageType.$obj = 3
    if [ $proto = dtlsudp4 ] || [ $proto = dtlsudp6 ]; then
	$SNMPSET SNMP-TARGET-MIB::snmpTargetParamsMPModel.$obj = 3
	$SNMPSET SNMP-TARGET-MIB::snmpTargetParamsSecurityModel.$obj = 4
	$SNMPSET SNMP-TARGET-MIB::snmpTargetParamsSecurityName.$obj = "__not_used__"
	$SNMPSET SNMP-TARGET-MIB::snmpTargetParamsSecurityLevel.$obj = 3
    else
	if [ $SNMP_PROTOCOL = "3" ]; then
	    $SNMPSET SNMP-TARGET-MIB::snmpTargetParamsMPModel.$obj = 3
	    $SNMPSET SNMP-TARGET-MIB::snmpTargetParamsSecurityModel.$obj = 3
	    $SNMPSET SNMP-TARGET-MIB::snmpTargetParamsSecurityName.$obj = $DYNTRAP_USER
	    if [ $proto = dtlsudp4 ] || [ $proto = dtlsudp6 ]; then
		$SNMPSET SNMP-TARGET-MIB::snmpTargetParamsSecurityLevel.$obj = 3
	    else
		$SNMPSET SNMP-TARGET-MIB::snmpTargetParamsSecurityLevel.$obj = 2
	    fi
	else
	    $SNMPSET SNMP-TARGET-MIB::snmpTargetParamsMPModel.$obj = 1
	    $SNMPSET SNMP-TARGET-MIB::snmpTargetParamsSecurityModel.$obj = 2
	    $SNMPSET SNMP-TARGET-MIB::snmpTargetParamsSecurityName.$obj = public
	    $SNMPSET SNMP-TARGET-MIB::snmpTargetParamsSecurityLevel.$obj = 1
	fi
    fi

    # snmpNotify
    $SNMPSET SNMP-NOTIFICATION-MIB::snmpNotifyRowStatus.$obj = 5
    $SNMPSET SNMP-NOTIFICATION-MIB::snmpNotifyTag.$obj = $link
    if [ $INFORM = "yes" ]; then
	notifytype=2
    else
	# trap
	notifytype=1
    fi
    $SNMPSET SNMP-NOTIFICATION-MIB::snmpNotifyType.$obj = $notifytype
    $SNMPSET SNMP-NOTIFICATION-MIB::snmpNotifyStorageType.$obj = 3

    # snmpTargetAddr
    $SNMPSET SNMP-TARGET-MIB::snmpTargetAddrRowStatus.$obj = 5
    $SNMPSET SNMP-TARGET-MIB::snmpTargetAddrTimeout.$obj = ${TIMEOUT}000
    $SNMPSET SNMP-TARGET-MIB::snmpTargetAddrRetryCount.$obj = $RETRYCOUNT
    $SNMPSET SNMP-TARGET-MIB::snmpTargetAddrTagList.$obj = $link
    $SNMPSET SNMP-TARGET-MIB::snmpTargetAddrParams.$obj = $link
    $SNMPSET SNMP-TARGET-MIB::snmpTargetAddrStorageType.$obj = 3
    if [ $proto = dtlsudp4 ] || [ $proto = dtlsudp6 ]; then
       $SNMPSET SNMP-TARGET-MIB::snmpTargetAddrTDomain.$obj = SNMP-TLS-TM-MIB::snmpDTLSUDPDomain
    fi
    if [ $proto = udp6 ]; then
	$SNMPSET SNMP-TARGET-MIB::snmpTargetAddrTDomain.$obj = SNMPv2-SMI::mib-2.100.1.2
    fi
    if [ $proto = udp4 ]; then
	$SNMPSET SNMP-TARGET-MIB::snmpTargetAddrTDomain.$obj = SNMPv2-TM::snmpUDPDomain
    fi
    $SNMPSET SNMP-TARGET-MIB::snmpTargetAddrTAddress.$obj x $targetaddr

    # enable the trap
    $SNMPSET SNMP-TARGET-MIB::snmpTargetAddrRowStatus.$obj = 1
    $SNMPSET SNMP-TARGET-MIB::snmpTargetParamsRowStatus.$obj = 1
    $SNMPSET SNMP-NOTIFICATION-MIB::snmpNotifyRowStatus.$obj = 1
}

get_mib()
{
    local host=$1

    $TRACE $FUNCNAME $host

    echo $host | grep dtlsudp >/dev/null
    if [ "$?" -eq 0 ]; then
	SNMPWALK="snmpbulkwalk -v 3 -r 2 -t 10 -T peerCert=$snmpdCert $host"
    else
	SNMPWALK="snmpbulkwalk -v 3 -r 2 -t 10 -a MD5 -A $USM_CMD_PW -l authNoPriv -u $USM_CMD_USER $host"
    fi

    $BASH "$SNMPWALK SNMP-TARGET-MIB::snmpTargetAddrTable > $SNMPWALK_OUT"
    $BASH "$SNMPWALK SNMP-TARGET-MIB::snmpTargetParamsTable >> $SNMPWALK_OUT"
    $BASH "$SNMPWALK SNMP-NOTIFICATION-MIB::snmpNotifyTable >> $SNMPWALK_OUT"
    $BASH "$SNMPWALK SNMP-USER-BASED-SM-MIB::usmUserTable >> $SNMPWALK_OUT"
    $BASH "$SNMPWALK SNMP-TLS-TM-MIB::snmpTlstmMIB >> $SNMPWALK_OUT"

    cat $SNMPWALK_OUT
}

send_trap () {
    local host=$1
    local trap_oid="NET-SNMP-EXAMPLES-MIB::netSnmpExampleHeartbeatNotification"
    local oid=netSnmpExampleHeartbeatRate
    if [ $DEBUG = "yes" ]; then
	#local trap_debug="-Lf $SNMPTRAP_LOG -Dtrap,usm,tsm -d"
	#local trap_debug="-Lo -Dtrap,usm,tsm -d"
	local trap_debug="-Lf $SNMPTRAP_LOG -DALL -d"
    fi
    local SNMPTRAP="snmptrap $trap_debug $inform -v 3 -r 0 -t 2"

    $NOTE "Send TRAP $host v$SNMP_PROTOCOL"
    [ $SNMP_PROTOCOL = "1"  ] && $BASH "snmptrap $trap_debug -v $SNMP_PROTOCOL $host $trap_oid \"\"  6 17 \"\"  $oid i $1"
    [ $SNMP_PROTOCOL = "2c" ] && $BASH "snmptrap $trap_debug -v $SNMP_PROTOCOL $host \"\" $trap_oid $oid i $2"

    if [ $SNMP_PROTOCOL = "3" ]; then
	echo $host | grep dtlsudp >/dev/null
	if [ "$?" -eq 0 ]; then
	    # TSM
	    if [ "$TLS_TYPE" = "peer" ]; then
		$BASH "$SNMPTRAP -T peerCert=$trapdCert -l authPriv $host \"\" $trap_oid $oid i $2"
	    else
		$BASH "$SNMPTRAP -T trust_cert=$caCert -T their_hostname=$HOSTNAME -l authPriv $host \"\" $trap_oid $oid i $2"
	    fi
	else
	    # USM
	    if [ $INFORM = "yes" ]; then
		$BASH "$SNMPTRAP -a MD5 -A $USM_CMD_PW -x $PRIVPROTO -X $USM_CMD_PW -l authNoPriv -u $USM_CMD_USER $host \"\" $trap_oid $oid i $2"
	    else
		$BASH "$SNMPTRAP -e $USM_CMD_EID -a MD5 -A $USM_CMD_PW -x $PRIVPROTO -X $USM_CMD_PW -l authNoPriv -u $USM_CMD_USER $host \"\" $trap_oid $oid i $2"
	    fi
	fi
    fi
}

send_traps () {
    [ "$IPv4" = "yes" ]     && send_trap $CONFIG_IPv4:$SNMPTRAPD_PORT 4
    [ "$IPv6" = "yes" ]     && send_trap udp6:[$CONFIG_IPv6]:$SNMPTRAPD_PORT 6
    [ "$DTLSUDP4" = "yes" ] && send_trap dtlsudp:$CONFIG_IPv4:$SNMPTRAPD_DTLSUDP_PORT 44
    [ "$DTLSUDP6" = "yes" ] && send_trap dtlsudp6:[$CONFIG_IPv6]:$SNMPTRAPD_DTLSUDP_PORT 66
}

configure_mibs ()
{
    [ $IPv4 = yes ]     && configure_mib $CONFIG_HOST $CONFIG_IPv4 $SNMPTRAPD_PORT
    [ $IPv6 = yes ]     && configure_mib $CONFIG_HOST $CONFIG_IPv6 $SNMPTRAPD_PORT
    [ $DTLSUDP4 = yes ] && configure_mib $CONFIG_HOST $CONFIG_IPv4 $SNMPTRAPD_DTLSUDP_PORT
    [ $DTLSUDP6 = yes ] && configure_mib $CONFIG_HOST $CONFIG_IPv6 $SNMPTRAPD_DTLSUDP_PORT
}

trap_kick ()
{
    local host=$1
    #local snmpset_debug="-Dsnmp -d"

    $TRACE $FUNCNAME
    echo $host | grep dtlsudp >/dev/null
    if [ "$?" -eq 0 ]; then
	# TSM
	local SNMPSET="snmpset $snmpset_debug -v 3 -t 5 -r 0 -T peerCert=$snmpdCert $host"
    else
	# USM
	local SNMPSET="snmpset $snmpset_debug -v 3 -t 5 -r 0 -a MD5 -A $USM_CMD_PW -l authNoPriv -u $USM_CMD_USER $host"
    fi
    [ "$DYNDEBUG" = "yes" ] && debugall_on
    # Create notification with message "life the universe and everything"
    $SNMPSET .1.3.6.1.4.1.2021.254.8.0 i 1 > /dev/null
    [ "$DYNDEBUG" = "yes" ] && sleep 1
    [ "$DYNDEBUG" = "yes" ] && debugall_off
}

usage()
{
    echo -e "\n$(basename $0) -h -c -C trap_traget\n"
    echo -e " trap_target = <loopback|local|remote>"
    echo -e " -c   clean: stop snmp servers and remove tmp directory before running the test"
    echo -e " -C   cleanall: including generated certificates"
    echo -e ""
    echo -e "use ENV variables to configure test"
    echo -n " IPv4=$IPv4"
    echo -n " IPv6=$IPv6"
    echo -n " DTLSUDP4=$DTLSUDP4"
    echo -n " DTLSUDP6=$DTLSUDP6"
#    echo -n " TCPDUMP=$TCPDUMP"
    echo -n " INFORM=$INFORM"
    echo -n " SETUP_TRAPSESS=$SETUP_TRAPSESS"
    echo -n " SETUP_DYNTRAP=$SETUP_DYNTRAP"
    echo -n " SEND_TRAPS=$SEND_TRAPS"
    echo -n " DEBUG=$DEBUG"
#    echo -n " TLS_TYPE=$TLS_TYPE"
    echo -n " MD=$MD"
    echo -e " $0"
}

###########################################
# main

while getopts "cCh" opt; do
    case $opt in
	c)
	    snmp_kill
	    rm -rf $TESTDIR
	    ;;
	C)
	    snmp_kill
	    rm -rf $TESTDIR $SNMPD_CERTDIR $SNMPTRAPD_CERTDIR
	    ;;
	h)
	    usage
	    exit 0
	    ;;
	*)
	    usage
	    exit 0
	    ;;

    esac
done
shift $((OPTIND-1))
if [ "$1" != "" ]; then
    trap_target=$1
else
    trap_target=localhost
fi

prepare_ip

if [ "$trap_target" = "local" ]; then
    CONFIG_IPv4=$IPv4_DEV0
    CONFIG_IPv6=$IPv6_DEV0
elif [ "$trap_target" = "remote" ]; then
    CONFIG_IPv4=$REMOTE_IPv4
    CONFIG_IPv6=$REMOTE_IPv6
else
    # default = loopback
    CONFIG_IPv4=$IPv4_LO
    CONFIG_IPv6=$IPv6_LO
fi

$NOTE "$(date) IPv4: $CONFIG_IPv4 IPv6: $CONFIG_IPv6 $trap_target"

snmp_kill
prepare
[ "$trap_target" = "remote" ] && prepare_remote

set_servers
snmp_start

[ "$SETUP_DYNTRAP" = "yes" ] && configure_mibs
[ "$TRACE" != ": " ] && get_mib $CONFIG_HOST

[ "$SEND_TRAPS" = "yes" ] && send_traps

[ "$TCPDUMP" = "yes" ] && tcpdump_capture any $TCPDUMP_TIMEOUT
trap_kick $CONFIG_HOST
sleep $TCPDUMP_TIMEOUT
[ "$TCPDUMP" = "yes" ] && tcpdump_read
[ "$TCPDUMP" = "yes" ] && cp $TCPDUMP_CAP .

if [ "$trap_target" = "remote" ]; then
    echo -e "\n---- Get REMOTE snmptrapd.log"
    scp $REMOTE_IPv4:$SNMPTRAPD_LOG $SNMPTRAPD_LOG.remote
    SNMPTRAPD_LOG=$SNMPTRAPD_LOG.remote
fi

status=0
NO_OF_TRAPS=0
[ "$SETUP_DYNTRAP" = "yes" ]  && [ "$IPv4" = "yes" ]     && ((NO_OF_TRAPS++))
[ "$SETUP_DYNTRAP" = "yes" ]  && [ "$IPv6" = "yes" ]     && ((NO_OF_TRAPS++))
[ "$SETUP_DYNTRAP" = "yes" ]  && [ "$DTLSUDP4" = "yes" ] && ((NO_OF_TRAPS++))
[ "$SETUP_DYNTRAP" = "yes" ]  && [ "$DTLSUDP6" = "yes" ] && ((NO_OF_TRAPS++))
[ "$SETUP_TRAPSESS" = "yes" ] && [ "$IPv4" = "yes" ]     && ((NO_OF_TRAPS++))
[ "$SETUP_TRAPSESS" = "yes" ] && [ "$IPv6" = "yes" ]     && ((NO_OF_TRAPS++))
[ "$SETUP_TRAPSESS" = "yes" ] && [ "$DTLSUDP4" = "yes" ] && ((NO_OF_TRAPS++))
[ "$SETUP_TRAPSESS" = "yes" ] && [ "$DTLSUDP6" = "yes" ] && ((NO_OF_TRAPS++))
no_of_traps=$(grep "life the universe and everything" $SNMPTRAPD_LOG | grep -v dumpv_ | wc -l)
if [ "$no_of_traps" != "$NO_OF_TRAPS" ]; then
    echoerr " FAILED: got $no_of_traps expected $NO_OF_TRAPS snmpd traps"
    status=-1
else
    echoerr " PASSED: got $no_of_traps snmpd traps"
fi

if [ "$SEND_TRAPS" = "yes" ]; then
    NO_OF_CMDTRAPS=0
    [ "$IPv4" = "yes" ]     && ((NO_OF_CMDTRAPS++))
    [ "$IPv6" = "yes" ]     && ((NO_OF_CMDTRAPS++))
    [ "$DTLSUDP4" = "yes" ] && ((NO_OF_CMDTRAPS++))
    [ "$DTLSUDP6" = "yes" ] && ((NO_OF_CMDTRAPS++))
    no_of_cmdtraps=$(grep "netSnmpExampleHeartbeatRate" $SNMPTRAPD_LOG | grep -v dumpv_ | wc -l)
    if [ "$no_of_cmdtraps" != "$NO_OF_CMDTRAPS" ]; then
	echoerr " FAILED: got $no_of_cmdtraps expected $NO_OF_CMDTRAPS cmd traps"
	status=-1
    else
	echoerr " PASSED: got $no_of_cmdtraps cmd traps"
    fi
fi

if [ $status != 0 ]; then
    $NOTE $SNMPTRAPD_LOG
    #cat $SNMPTRAPD_LOG

    $NOTE $SNMPD_LOG
    #cat $SNMPD_LOG
fi

exit $status

# TODO
- fix TLS ip addresses
- test with clientaddr and DTLSUDP
