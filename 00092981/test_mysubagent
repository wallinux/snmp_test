#!/bin/bash
#set -x

if [ $# -lt 1 ]; then
    TMPDIR=/tmp
else
    TMPDIR=$1
fi
[ "$COUNT" = "" ] && COUNT=10
[ "$TIMEOUT" = "" ] && TIMEOUT=5

SNMPENV=$TMPDIR/snmp.env

MIB=NET-SNMP-TUTORIAL-MIB::nstAgentSubagentObject.0
PORT=1161
SNMP_CONF=$TMPDIR/snmp.conf
SNMP_LOG=$TMPDIR/snmp.log
SNMPD_LOG=$TMPDIR/snmpd.log
SNMPD_CONF=$TMPDIR/snmpd.conf
SNMPD_TOKENS=snmpd.tokens
SNMPD_PID=$TMPDIR/snmpd.pid
SNMPAGENT_LOG=$TMPDIR/agentx.log
SNMPAGENT_CONF=$TMPDIR/agentx.conf
COREFILEDIR=$(dirname $(realpath $TMPDIR))
AGENTX_SOCKET=tcp:localhost:1705
OPT="-v2c -r 2 -t 3 -c public localhost:$PORT"
#OPT="-c $SNMP_CONF -Lf $SNMP_LOG -d -Dsess_process_packet -v2c -r 1 -t 2 -c public localhost:$PORT"
SNMP_VER=$(net-snmp-config --version)

##########################################################################
function snmp_kill
{
    killall mysubagent &>/dev/null
    sleep 1
    killall snmpd  &>/dev/null
}

function create_snmpd_conf ()
{
    echo "[snmp] logTimestamp 1" >> $SNMPD_CONF
    # master agentx
    #    agentXPerms SOCKPERMS [DIRPERMS [USER|UID [GROUP|GID]]]
    #           Defines the permissions and ownership of the AgentX Unix Domain socket, and the parent directories of this socket.  SOCKPERMS  and  DIRPERMS  must  be  octal  digits  (see
    #           chmod(1) ). By default this socket will only be accessible to subagents which have the same userid as the agent.

    #    agentXSocket [<transport-specifier>:]<transport-address>[,...]
    #           defines  the  address the master agent listens at, or the subagent should connect to.  The default is the Unix Domain socket "/var/agentx/master".  Another common alterna-
    #           tive is tcp:localhost:705.  See the section LISTENING ADDRESSES in the snmpd(8) manual page for more information about the format of addresses.

    #           Note:  Specifying an AgentX socket does not automatically enable AgentX functionality (unlike the '-x' command-line option).

    #echo "agentXTimeout 2" >> $SNMPD_CONF
    #echo "agentXRetries 2" >> $SNMPD_CONF
}

function create_snmpagent_conf ()
{
    echo "[snmp] logTimestamp 1" >> $SNMPAGENT_CONF
    #echo "agentXPingInterval 5"  >> $SNMPAGENT_CONF
}

function create_snmp_conf ()
{
    echo "logTimestamp 1" >> $SNMP_CONF
}


function prepare
{
    mkdir -p $TMPDIR
    rm -rf $TMPDIR/*.log
    rm -rf $TMPDIR/*.conf
    rm -rf $COREFILEDIR/core.*
    mkdir -p $HOME/.snmp/mibs
    cp -f NET-SNMP-TUTORIAL-MIB.txt $HOME/.snmp/mibs
    export MIBS=+NET-SNMP-TUTORIAL-MIB
    create_snmpd_conf
    create_snmp_conf
    create_snmpagent_conf
    echo "export MIBS=+NET-SNMP-TUTORIAL-MIB" > $SNMPENV
    echo "export SNMPCONFPATH=$TMPDIR" >> $SNMPENV
    source $SNMPENV
}

function snmp_start
{
    [ "$DEBUG" = "yes" ] && snmpd_dbg="-d -DALL"
    [ "$DEBUG" = "yes" ] && agent_dbg="-d -DALL"
    [ "$DEBUG_AW" = "yes" ] && agent_dbg="-d -Dagentx,nstAgentSubagentObject,AW"
    [ "$DEBUG_AW" = "yes" ] && snmpd_dbg="-Dagentx,sess_process_packet,AW,sess_read,snmp_agent,agent_set,handler:calling,handler:returned,helper:cache_handler,cache_timer"

    echo "$COREFILEDIR/core.%e.%p" > /proc/sys/kernel/core_pattern
    ulimit -c unlimited
    #snmpd -Lf $SNMPD_LOG $snmpd_dbg  -C -c $SNMPD_CONF,$SNMPD_TOKENS -p $SNMPD_PID --rwcommunity=public --master=agentx --agentXSocket=$AGENTX_SOCKET udp:$PORT
    snmpd -Lf $SNMPD_LOG $snmpd_dbg -C -c $SNMPD_CONF -p $SNMPD_PID --rwcommunity=public --master=agentx --agentXSocket=$AGENTX_SOCKET udp:$PORT
    sleep 2
    if [ "$SNMP_VER" = "5.8" ]; then
	$TMPDIR/mysubagent -Lf $SNMPAGENT_LOG $agent_dbg -C -c $SNMPAGENT_CONF -x $AGENTX_SOCKET
    else
	$TMPDIR/mysubagent -Lf $SNMPAGENT_LOG $agent_dbg -x $AGENTX_SOCKET
    fi
    COREFILE=$COREFILEDIR/core.snmpd.$(cat $SNMPD_PID)
    sleep 5
}

function core_dumped()
{
    echo ------ CORE DUMPED ------
    echo "bt"   >> $TMPDIR/gdb.cmd
    echo "quit" >> $TMPDIR/gdb.cmd
    gdb snmpd $COREFILE -x $TMPDIR/gdb.cmd
}

##########################################################################
# main

snmp_kill
prepare
snmp_start

#snmpget $OPT $MIB
#echo --- snmpset
#snmpset $OPT $MIB = 5;
snmpset $OPT $MIB = $TIMEOUT;
sleep 5
for i in $(seq 1 $COUNT); do
	 echo --- $i: snmpget $OPT $MIB
	 snmpget $OPT $MIB &
done

exit

echo --- snmpset $OPT $MIB = 1
snmpset $OPT $MIB = 0;
echo --- snmpget $OPT $MIB
snmpget $OPT $MIB

#sleep 10
#echo --- kill
#snmp_kill

if [ -e $COREFILE ]; then
    core_dumped
    exit 1
fi

exit 0

