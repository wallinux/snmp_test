#!/bin/bash

: ${OUTDIR:=$PWD/out}
: ${SETUP_TRAPSESS:=yes}
: ${SETUP_DYNTRAP:=yes}
: ${IPv4:=yes}
: ${IPv6:=yes}
: ${INFORM:=no}

: ${SETX:="+x"}

#####################################################################

TESTDIR=$OUTDIR/test
CONFDIR=$TESTDIR
CERTDIR=$OUTDIR/cert

SNMPD_LOG=$TESTDIR/snmpd.log
SNMPD_CONF=$CONFDIR/snmpd.conf
SNMPD_PORT=161

SNMPTRAPD_LOG=$TESTDIR/snmptrapd.log
SNMPTRAPD_CONF=$CONFDIR/snmptrapd.conf
SNMPTRAPD_PORT=162

SNMPWALK_OUT=$TESTDIR/snmpwalk.out

SNMPENV=$TESTDIR/snmpenv

USM_SNMPD_USER=usm_snmpduser
USM_SNMPD_PW=usm_snmpdpw
USM_SNMPD_EID=0x80001f88805239811111111111

USM_CMD_USER=usm_cmduser
USM_CMD_PW=usm_cmdpw

NOTE='echo -e \n--- '
echoerr() { echo "$@" 1>&2; }
#####################################################################


function snmp_kill () {
    killall snmpd 2> /dev/null
    sleep 1
    killall snmptrapd  2> /dev/null
    sleep 1

    rm -f $SNMPTRAPD_LOG
    rm -f $SNMPD_LOG
}

function create_snmpd_conf ()
{
    local conf=$1

    echo "# snmpd.conf" > $conf
    echo "oldEngineID $USM_SNMPD_EID" >> $conf
    echo "createUser -e $USM_SNMPD_EID $USM_SNMPD_USER MD5 $USM_SNMPD_PW" >> $conf
    echo "createUser $USM_CMD_USER MD5 $USM_CMD_PW" >> $conf
    echo "rwuser $USM_CMD_USER" >> $conf

    if [ $INFORM = "yes" ]; then
	local inform="-Ci"
    fi

    [ "$SETUP_TRAPSESS" != "yes" ] && lcomment="## "
    [ "$IPv4" = "yes" ] && \
	echo "${lcomment}trapsess -v 3 -r 0 -t 3 $inform -e $USM_SNMPD_EID -a MD5 -u $USM_SNMPD_USER -A $USM_SNMPD_PW -l authNoPriv udp:$CONFIG_IPv4:$SNMPTRAPD_PORT" >> $conf
    [ "$IPv6" = "yes" ] && \
	echo "${lcomment}trapsess -v 3 -r 0 -t 3 $inform -e $USM_SNMPD_EID -a MD5 -u $USM_SNMPD_USER -A $USM_SNMPD_PW -l authNoPriv udp6:[$CONFIG_IPv6]:$SNMPTRAPD_PORT" >> $conf
}

function create_snmptrapd_conf ()
{
    local conf=$1

    echo "# snmptrapd.conf" > $conf
    echo "oldEngineID $USM_SNMPD_EID" >> $conf
    echo "createUser -e $USM_SNMPD_EID $USM_SNMPD_USER MD5 $USM_SNMPD_PW" >> $conf
    echo "authUser log $USM_SNMPD_USER" >> $conf
}

function export_env ()
{
    echo "export SNMP_PERSISTENT_DIR=$TESTDIR/persist" > $SNMPENV
    echo "export SNMPCONFPATH=$TESTDIR:$CERTDIR:$SNMP_PERSISTENT_DIR" >> $SNMPENV
    source $SNMPENV
    mkdir -p $SNMP_PERSISTENT_DIR
}

function prepare () {
    if [ ! -e $TESTDIR ]; then
	mkdir -p $TESTDIR
    fi

    create_snmpd_conf $SNMPD_CONF
    create_snmptrapd_conf $SNMPTRAPD_CONF
    export_env
}

function snmp_start () {
    sh $SETX -c "snmptrapd $DEBUG -C -c $SNMPTRAPD_CONF -Lf $SNMPTRAPD_LOG udp:162 udp6:162"
    sleep 3
    sh $SETX -c "snmpd $DEBUG -C -c $SNMPD_CONF -Lf $SNMPD_LOG udp:161 udp6:161"
    sleep 3
}

function get_ipv ()
{
    echo $1 | grep : >/dev/null
    if [ $? = 0 ]; then
	# IPv6
	printf "6"
    else
	# IPv4
	printf "4"
    fi
}

function convert_ip2hex ()
{
    local host=$1
    local port=$2

    printf "0x"
    if [ $(get_ipv $host) = 6 ]; then
	echo $host | grep :: >/dev/null
	if [ $? = 0 ]; then
	    no_of_colons=$(echo $host | tr -d -c ':' | awk '{ print length; }')
	    case $no_of_colons in
		7)
		    host=$(echo $host | sed 's/::/:0:/')
		    ;;
		6)
		    host=$(echo $host | sed 's/::/:0:0:/')
		    ;;
		5)
		    host=$(echo $host | sed 's/::/:0:0:0:/')
		    ;;
		4)
		    host=$(echo $host | sed 's/::/:0:0:0:0:/')
		    ;;
		3)
		    host=$(echo $host | sed 's/::/:0:0:0:0:0:/')
		    ;;
		2)
		    host=$(echo $host | sed 's/::/0:0:0:0:0:0:0:/')
		    ;;
	    esac
	fi
	for i in $(echo $host | tr ':' ' '); do
	    printf "%04x" $(echo $((16#$i)))
	done
    else
	for i in $(echo $host | tr '.' ' '); do
	    printf "%02x" $i
	done
    fi
    printf "%04x" $port
    printf "\n"
}

function f_snmpset ()
{
   snmpset $snmpset_debug -v 3 -r 0 -a MD5 -A $USM_CMD_PW -l authNoPriv -u $USM_CMD_USER $CONFIG_HOST $* > /dev/null
}

function configure_mib()
{
    local host=$1
    local targetaddr=$(convert_ip2hex $2 $3)
    local ipv=$(get_ipv $2)
    local proto=udp${ipv}
    local obj="'mytrap_${proto}'"
    local link=mytrap_${proto}
    
    $NOTE "HOST: $host TRAPADDR: $2:$3 ($targetaddr) OBJ=$obj"

    # snmpTargetParams
    f_snmpset "SNMP-TARGET-MIB::snmpTargetParamsRowStatus.$obj = 5"
    f_snmpset "SNMP-TARGET-MIB::snmpTargetParamsStorageType.$obj = 3"
    f_snmpset "SNMP-TARGET-MIB::snmpTargetParamsMPModel.$obj = 3"
    f_snmpset "SNMP-TARGET-MIB::snmpTargetParamsSecurityModel.$obj = 3"
    f_snmpset "SNMP-TARGET-MIB::snmpTargetParamsSecurityName.$obj = $USM_SNMPD_USER"
    f_snmpset "SNMP-TARGET-MIB::snmpTargetParamsSecurityLevel.$obj = 2"

    # snmpNotify
    f_snmpset "SNMP-NOTIFICATION-MIB::snmpNotifyRowStatus.$obj = 5"
    f_snmpset "SNMP-NOTIFICATION-MIB::snmpNotifyTag.$obj = $link"
    if [ $INFORM = "yes" ]; then
	notifytype=2
    else
	# trap
	notifytype=1
    fi
    f_snmpset "SNMP-NOTIFICATION-MIB::snmpNotifyType.$obj = $notifytype"
    f_snmpset "SNMP-NOTIFICATION-MIB::snmpNotifyStorageType.$obj = 3"

    # snmpTargetAddr
    f_snmpset "SNMP-TARGET-MIB::snmpTargetAddrRowStatus.$obj = 5"
    f_snmpset "SNMP-TARGET-MIB::snmpTargetAddrTimeout.$obj = 300"
    f_snmpset "SNMP-TARGET-MIB::snmpTargetAddrRetryCount.$obj = 0"
    f_snmpset "SNMP-TARGET-MIB::snmpTargetAddrTagList.$obj = $link"
    f_snmpset "SNMP-TARGET-MIB::snmpTargetAddrParams.$obj = $link"
    f_snmpset "SNMP-TARGET-MIB::snmpTargetAddrStorageType.$obj = 3"
    if [ $proto = udp4 ]; then
	f_snmpset "SNMP-TARGET-MIB::snmpTargetAddrTDomain.$obj = SNMPv2-TM::snmpUDPDomain"
    fi
    if [ $proto = udp6 ]; then
	f_snmpset "SNMP-TARGET-MIB::snmpTargetAddrTDomain.$obj = SNMPv2-SMI::mib-2.100.1.2"
    fi
    f_snmpset "SNMP-TARGET-MIB::snmpTargetAddrTAddress.$obj x $targetaddr"

    # enable the trap
    f_snmpset "SNMP-TARGET-MIB::snmpTargetAddrRowStatus.$obj = 1"
    f_snmpset "SNMP-TARGET-MIB::snmpTargetParamsRowStatus.$obj = 1"
    f_snmpset "SNMP-NOTIFICATION-MIB::snmpNotifyRowStatus.$obj = 1"
}

function get_target_address()
{
    #$NOTE "walk SNMP-TARGET-MIB::snmpTargetAddrTAddress"
    sh $SETX -c "snmpwalk -v 3 -r 2 -t 10 -a MD5 -A $USM_CMD_PW -l authNoPriv -u $USM_CMD_USER $1 SNMP-TARGET-MIB::snmpTargetAddrTable > $SNMPWALK_OUT"
    sh $SETX -c "snmpwalk -v 3 -r 2 -t 10 -a MD5 -A $USM_CMD_PW -l authNoPriv -u $USM_CMD_USER $1 SNMP-TARGET-MIB::snmpTargetParamsTable >> $SNMPWALK_OUT"
    sh $SETX -c "snmpwalk -v 3 -r 2 -t 10 -a MD5 -A $USM_CMD_PW -l authNoPriv -u $USM_CMD_USER $1 SNMP-NOTIFICATION-MIB::snmpNotifyTable >> $SNMPWALK_OUT"
    sh $SETX -c "snmpwalk -v 3 -r 2 -t 10 -a MD5 -A $USM_CMD_PW -l authNoPriv -u $USM_CMD_USER $1 SNMP-USER-BASED-SM-MIB::usmUserTable >> $SNMPWALK_OUT"
    #sh $SETX -c "snmpwalk -v 3 -r 2 -t 10 -a MD5 -A $USM_CMD_PW -l authNoPriv -u $USM_CMD_USER $1 . > $SNMPWALK_OUT"
}

function echovar()
{
    echo -n " $1=${!1}"
}

function printenv()
{
    echovar SETUP_TRAPSESS
    echovar SETUP_DYNTRAP
    echovar IPv4
    echovar IPv6
    echovar INFORM
    echo -e " $0"
}

function usage()
{
    echo -e "\n$(basename $0) -h -c \n"
    echo -e " -c   clean: remove out directory ($OUTDIR)"
    echo -e ""
    echo -e "use ENV variables to configure test"
    printenv
}


###########################################
# main

while getopts "ch" opt; do
    case $opt in
	c)
	    snmp_kill
	    rm -rf $OUTDIR
	    ;;

	h)
	    usage
	    exit 0
	    ;;

	*)
	    usage
	    exit 0
	    ;;

    esac
done
shift $((OPTIND-1))

CONFIG_HOST=0.0.0.0:161
#localhost
CONFIG_IPv4=127.0.0.1
CONFIG_IPv6=::1
# local
#CONFIG_IPv4=172.19.0.2
#CONFIG_IPv6=2001:db8:2::2
# remote
#CONFIG_IPv4=172.19.0.3
#CONFIG_IPv6=2001:db8:2::3

mkdir -p $OUTDIR
echovar OUTDIR; echo "\n"
printenv
snmpd --version

snmp_kill
prepare
snmp_start

[ "$SETUP_DYNTRAP"  = "yes" ] && [ $IPv4 = yes ] && configure_mib $CONFIG_HOST $CONFIG_IPv4 $SNMPTRAPD_PORT
[ "$SETUP_DYNTRAP"  = "yes" ] && [ $IPv6 = yes ] && configure_mib $CONFIG_HOST $CONFIG_IPv6 $SNMPTRAPD_PORT

get_target_address $CONFIG_HOST

# Create notification with message "life the universe and everything"
f_snmpset ".1.3.6.1.4.1.2021.254.8.0 i 1"
sleep 1

killall snmpd
sleep 3
killall snmptrapd

if [ "$SETUP_TRAPSESS" = "yes" ]; then
    NO_OF_TRAPS=4
else
    NO_OF_TRAPS=2
fi

NO_OF_TRAPS=0
[ "$SETUP_DYNTRAP"  = "yes" ] && [ "$IPv4" = "yes" ] && ((NO_OF_TRAPS++))
[ "$SETUP_DYNTRAP"  = "yes" ] && [ "$IPv6" = "yes" ] && ((NO_OF_TRAPS++))
[ "$SETUP_TRAPSESS" = "yes" ] && [ "$IPv4" = "yes" ] && ((NO_OF_TRAPS++))
[ "$SETUP_TRAPSESS" = "yes" ] && [ "$IPv6" = "yes" ] && ((NO_OF_TRAPS++))

no_of_traps=$(grep "life the universe and everything" $SNMPTRAPD_LOG | wc -l)
if [ "$no_of_traps" != "$NO_OF_TRAPS" ]; then
    $NOTE $SNMPTRAPD_LOG
    cat $SNMPTRAPD_LOG

    $NOTE $SNMPD_LOG
    cat $SNMPD_LOG

    $NOTE $SNMPWALK_OUT
    cat $SNMPWALK_OUT

    echoerr "FAILED: got $no_of_traps expected $NO_OF_TRAPS shutdown traps"
    exit -1
fi

echoerr "PASSED"
exit 0
